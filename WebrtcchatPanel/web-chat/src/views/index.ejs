<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Chat Demo</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Chat Message Styles */
        .sent-message {
            text-align: right;
            margin: 10px 0;
        }
        .received-message {
            text-align: left;
            margin: 10px 0;
        }
        .message-box {
            border-radius: 8px;
            padding: 8px 12px;
            max-width: 60%;
            display: inline-block;
        }
        .sent-message .message-box {
            background-color: #dcf8c6;
            color: #000;
        }
        .received-message .message-box {
            background-color: #fff;
            color: #000;
            border: 1px solid #ccc;
        }
        /* Scrollbar for chat window */
        /* #chat-box {
            overflow-y: auto;
            max-height: 80%;
        } */
        #chat-box {
            height: 100vh; /* Full viewport height */
            overflow-y: auto;
        }

        #send-box {
            position: sticky;
            bottom: 0;
            background-color: #f8f9fa;
            border-top: 1px solid #ddd;
            padding: 1rem;
        }

        #message-list {
            overflow-y: auto;
            max-height: calc(100vh - 130px); /* Adjust based on the height of send-box */
        }

        #empty-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>
    <div class="container-fluid vh-100">
        <div class="row h-100">
            <!-- Contacts Sidebar -->
            <div class="col-lg-4 col-md-4 col-sm-12 border-end bg-light d-flex flex-column p-0">
                <div class="bg-primary text-white py-3 px-4 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Contacts</h5>
                    <div>
                        <button id="btn-groups" class="btn btn-light btn-sm me-2" onclick="showGroups()">Groups</button>
                        <button id="btn-onetoone" class="btn btn-light btn-sm" onclick="showOneToOne()">One-to-One</button>
                    </div>
                </div>
                <ul id="contacts-list" class="list-group list-group-flush overflow-auto flex-grow-1" style="height: calc(100% - 56px);">
                    <!-- Contacts will be dynamically populated here -->
                </ul>   
            </div>
    
            <!-- Chat Window -->
            <div class="col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0">
                <div class="bg-primary text-white py-3 px-4 d-flex align-items-center">
                    <h5 id="chat-name" class="mb-0">Select a contact</h5>
                </div>
                <div id="chat-box" class="flex-grow-1 overflow-auto p-3 bg-light d-flex flex-column">
                    <p class="text-center text-muted">Please select a contact to start chatting.</p>
                </div>
                <div id="send-box" class="fixed-bottom bg-light border-top p-3">
                   
                </div>
            </div>
        </div>
    </div>
    

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.socket.io/4.5.3/socket.io.min.js"></script>

    <script>
        const user_id = "<%= userData.user_id %>";
        const ContectUserList = <%- JSON.stringify(ContectUserList || []) %>;
        const GroupList = <%- JSON.stringify(GroupList || []) %>;

        console.log("ContectUserList:", ContectUserList);
        console.log("GroupList:", GroupList);

        let isFetching = false; // Flag to prevent duplicate fetches

        function populateContacts(data, type) {
            const contactsList = document.getElementById('contacts-list');
            contactsList.innerHTML = ''; // Clear current list

            if (data.length === 0) {
                contactsList.innerHTML = `<p class="text-center text-muted mt-3">No ${type === 'group' ? 'groups' : 'contacts'} found.</p>`;
                return;
            }

            data.forEach(contact => {
                const listItem = document.createElement('li');
                listItem.className = 'list-group-item d-flex align-items-center';
                listItem.innerHTML = `
                    <div class="rounded-circle ${type === 'group' ? 'bg-success' : 'bg-secondary'} me-3" style="width: 50px; height: 50px;"></div>
                    <div>
                        <p class="mb-0 fw-bold">${type === 'group' ? contact.groupName : contact.name || contact.mobile}</p>
                        <small class="text-muted">${type === 'group' ? 'Group chat' : 'Click to chat'}</small>
                    </div>
                `;
                listItem.onclick = () => loadChat(type === 'group' ? contact.groupId : contact.user_id, type === 'group' ? contact.groupName : contact.name || contact.mobile, type);
                contactsList.appendChild(listItem);
            });
        }

        function showGroups() {
            populateContacts(GroupList, 'group');
        }

        function showOneToOne() {
            populateContacts(ContectUserList, 'one-to-one');
        }

        function loadChat(receiverId, receiverName, type) {
            const chatName = document.getElementById('chat-name');
            chatName.innerHTML = receiverName;
            chatName.dataset.receiverId = receiverId;

            const chatBox = document.getElementById('chat-box');
            chatBox.innerHTML = "<p class='text-center text-muted'>Loading messages...</p>";

            const sendBox = document.getElementById('send-box');
            sendBox.innerHTML = `<form id="message-form" class="d-flex" onsubmit="sendMessage(event, '${type}')">
                            <input id="message-input" type="text" class="form-control me-2" placeholder="Type a message..." autocomplete="off" required>
                            <button type="submit" class="btn btn-success">Send</button>
                        </form>`;

            const pageSize = 12;
            let currentPage = 1;
            let totalMessages = 0;

            chatBox.innerHTML ="<p class='text-center text-muted'>Old Chat</p>"
            fetchMessages(receiverId, type, currentPage, pageSize, false);
            chatBox.onscroll = () => {
                console.log(chatBox.scrollTop <= 10 , !isFetching , totalMessages , currentPage * pageSize);
                if (chatBox.scrollTop <= 10 && !isFetching && totalMessages > currentPage * pageSize) {
                    isFetching = true;
                    currentPage++;
                    fetchMessages(receiverId, type, currentPage, pageSize, true);
                }
            };

            function fetchMessages(receiverId, type, page, pageSize, prepend) {
                socket.emit('loadChatHistory', { receiverId, page, pageSize, type }, (acknowledgment) => {
                    const chatBox = document.getElementById('chat-box');
                    
                    // Remove the "Loading messages..." message once data is fetched
                    // chatBox.innerHTML = ''; 

                    if (acknowledgment.statusCode === 200) {
                        const data = acknowledgment.data;
                        totalMessages = data.totalMessages;
                        displayMessages(data.messages, prepend);
                    } else {
                        console.error('Error:', acknowledgment.error);
                    }
                    isFetching = false;
                });
            }

        }

        function displayMessages(messages, prepend = false) {
            const chatBox = document.getElementById('chat-box');
            const fragment = document.createDocumentFragment();

            messages.forEach(message => {
                const messageElement = document.createElement('div');
                console.log("msg",message.senderId ,user_id);
                messageElement.classList.add(message.senderId == user_id ? 'sent-message' : 'received-message');
                messageElement.innerHTML = `<div class="message-box">${message.msgText}</div>`;
                fragment.appendChild(messageElement);
            });

            if (prepend) {
                chatBox.insertBefore(fragment, chatBox.firstChild);
            } else {
                chatBox.appendChild(fragment);
            }

            chatBox.scrollTop = chatBox.scrollHeight;
        }

        
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io('/', { path: '/v1/chat/socket.io' });
            showOneToOne();
        });
    </script>
    <script>
        // Inject token passed from the backend (EJS rendering)
        const token = "<%= token %>"; // Token from the server
           
        // Declare socket globally
        let socket;
    
        // Initialize socket on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize Socket.IO connection
            socket = io('/', {
                path: '/v1/chat/socket.io', // Ensure this matches the server-side path
                query: { token } // Pass the token as a query parameter
            });
    
            // Socket connection listeners
            socket.on('connect', () => {
                console.log('Connected to the server');
            });
    
            socket.on('disconnect', () => {
                console.log('Disconnected from the server');
            });
    
            // Listen for the 'receiveMsg' event
            socket.on('receiveMsg', (data) => {
                console.log('Received message:', data);
                data=data.data
                let timestamp=Number(data.timestamp)
                // Get the chat box element where you display messages
                const chatBox = document.getElementById('chat-box');
                
                // Dynamically update the chat with the new message
                chatBox.innerHTML += `
                    <div class="received-message">
                        <div class="message-box">${data.msgText}</div>
                        <div class="sender-info">Sent by: ${data.senderId} at ${new Date(timestamp).toLocaleString()}</div>
                    </div>
                `;
                
                // Scroll to the bottom of the chat box
                chatBox.scrollTop = chatBox.scrollHeight;
            });
    
            // Show One-to-One Chats by default
            showOneToOne();
        });
    
        // Send a message function (unchanged)
        function sendMessage(event, type) {
            event.preventDefault();
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            if (message) {
                const msgText = message;
                const receiverId = document.getElementById('chat-name').dataset.receiverId;
                const receiverName = document.getElementById('chat-name').innerHTML;
                const chatBox = document.getElementById('chat-box');
                const timestamp = Date.now().toString();
                const localMessageId = generateUUID();
                socket.emit('sendMessage', { receiverId, receiverName, type, msgText, localMessageId, timestamp }, (ack) => {
                    if (ack.statusCode === 200) {
                        chatBox.innerHTML += `
                            <div class="sent-message">
                                <div class="message-box">${message}</div>
                            </div>
                        `;
                        messageInput.value = ''; // Clear the input
                        chatBox.scrollTop = chatBox.scrollHeight; // Scroll to bottom
                    } else {
                        console.log("Error in messageSend", ack.error);
                    }
                });
            }
        }
    
        // Function to generate unique UUID for message
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
    </script>
    
</body>
</html>
