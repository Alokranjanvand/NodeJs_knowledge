-- Adminer 4.8.1 MySQL 10.11.9-MariaDB dump

SET NAMES utf8;
SET time_zone = '+00:00';
SET foreign_key_checks = 0;
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

DROP TABLE IF EXISTS `groups`;
CREATE TABLE `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `createdOn` datetime NOT NULL,
  `groupId` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT 0,
  `created_by` char(36) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `groupId` (`groupId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;


DROP TABLE IF EXISTS `group_members`;
CREATE TABLE `group_members` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `groupId` int(11) NOT NULL,
  `memberId` varchar(255) NOT NULL,
  `createdOn` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;


DROP TABLE IF EXISTS `lievChat_Msg`;
CREATE TABLE `lievChat_Msg` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `senderId` int(11) NOT NULL,
  `receiverId` int(11) NOT NULL,
  `timestamp` bigint(20) NOT NULL,
  `msgText` text NOT NULL,
  `localMessageId` char(36) NOT NULL,
  `isMsgReceived` tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`,`localMessageId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;


DROP TABLE IF EXISTS `messages`;
CREATE TABLE `messages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `senderId` int(11) NOT NULL,
  `receiverId` int(11) NOT NULL,
  `groupId` int(11) DEFAULT NULL,
  `groupName` varchar(255) DEFAULT NULL,
  `timestamp` bigint(20) NOT NULL,
  `isGroupMsg` tinyint(1) DEFAULT 0,
  `msgText` text NOT NULL,
  `localMessageId` char(36) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,
  PRIMARY KEY (`id`,`localMessageId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;


DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `firstName` varchar(255) DEFAULT NULL,
  `lastName` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `lastOnlineAt` datetime DEFAULT NULL,
  `mobile` varchar(255) DEFAULT NULL,
  `status` enum('active','inactive') DEFAULT 'active',
  `createdAt` datetime DEFAULT NULL,
  `updatedAt` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;


DROP TABLE IF EXISTS `webrtc_campaigns`;
CREATE TABLE `webrtc_campaigns` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `createdOn` datetime NOT NULL,
  `clientId` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT 0,
  `created_by` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

INSERT INTO `webrtc_campaigns` (`id`, `name`, `createdOn`, `clientId`, `isDeleted`, `created_by`) VALUES
(1,	'camp1',	'2024-12-17 12:04:44',	23,	0,	1),
(2,	'camp2',	'2024-12-17 12:15:19',	23,	0,	5),
(17,	'testwebrtc',	'2024-12-23 13:10:28',	3181,	0,	10788),
(18,	'demoptl',	'2024-12-23 13:15:26',	3181,	0,	4000),
(19,	'testak',	'2025-01-13 06:03:21',	3181,	0,	10788),
(20,	'dsgroup',	'2025-01-27 09:16:10',	3181,	0,	10788),
(21,	'ablended',	'2025-01-31 05:47:36',	3181,	0,	10788),
(22,	'shubham',	'2025-01-31 09:02:04',	3181,	0,	10787);

DROP TABLE IF EXISTS `webrtc_campaign_members`;
CREATE TABLE `webrtc_campaign_members` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `campaignId` int(11) NOT NULL,
  `memberId` varchar(255) NOT NULL,
  `createdOn` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

INSERT INTO `webrtc_campaign_members` (`id`, `campaignId`, `memberId`, `createdOn`) VALUES
(1,	1,	'1',	'2024-12-17 12:04:44'),
(2,	1,	'2',	'2024-12-17 12:05:16'),
(3,	1,	'3',	'2024-12-17 12:14:51'),
(4,	2,	'4',	'2024-12-17 12:15:19'),
(5,	1,	'5',	'2024-12-17 12:15:58'),
(6,	2,	'5',	'2024-12-17 12:17:48'),
(7,	2,	'3',	'2024-12-17 12:19:00'),
(49,	17,	'40',	'2024-12-23 13:10:28'),
(50,	17,	'41',	'2024-12-23 13:11:43'),
(51,	18,	'42',	'2024-12-23 13:15:26'),
(52,	17,	'42',	'2024-12-23 13:16:03'),
(53,	18,	'41',	'2024-12-24 08:50:15'),
(54,	18,	'40',	'2024-12-30 04:54:43'),
(55,	17,	'43',	'2025-01-03 11:08:32'),
(56,	18,	'43',	'2025-01-07 08:56:47'),
(57,	17,	'44',	'2025-01-10 06:24:41'),
(58,	17,	'45',	'2025-01-10 07:40:09'),
(59,	18,	'46',	'2025-01-11 11:26:29'),
(60,	19,	'40',	'2025-01-13 06:03:21'),
(61,	19,	'43',	'2025-01-17 12:21:42'),
(62,	18,	'45',	'2025-01-20 12:48:00'),
(63,	20,	'40',	'2025-01-27 09:16:10'),
(64,	21,	'40',	'2025-01-31 05:47:36'),
(65,	19,	'41',	'2025-01-31 08:16:46'),
(66,	22,	'41',	'2025-01-31 09:02:04'),
(67,	18,	'44',	'2025-01-31 11:41:02');

SET NAMES utf8mb4;

DROP TABLE IF EXISTS `webrtc_messages`;
CREATE TABLE `webrtc_messages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `senderId` int(11) NOT NULL,
  `receiverId` int(11) NOT NULL,
  `campaignId` int(11) DEFAULT NULL,
  `campaignName` varchar(255) DEFAULT NULL,
  `timestamp` bigint(20) NOT NULL,
  `isGroupMsg` tinyint(1) DEFAULT 0,
  `msgText` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `localMessageId` char(36) NOT NULL,
  `isMsgReceived` tinyint(1) DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY `localMessageId` (`localMessageId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

INSERT INTO `webrtc_messages` (`id`, `senderId`, `receiverId`, `campaignId`, `campaignName`, `timestamp`, `isGroupMsg`, `msgText`, `localMessageId`, `isMsgReceived`) VALUES
(28,	3,	5,	1,	'camp1',	1734437678893,	0,	'dd',	'cba25d7a-22c7-4e47-8536-8ec84b1a5b8a',	1),
(29,	5,	1,	1,	'camp1',	1734437690829,	0,	'sss',	'29762be3-9d9d-4123-b739-629c0346aef1',	1),
(30,	4,	5,	2,	'camp2',	1734437783694,	0,	'sss',	'bd16a237-9b7f-4727-a724-a92a732a7b83',	1),
(31,	2,	3,	1,	'camp1',	1734437871585,	0,	'ddd',	'ef44674e-887f-45c4-9c08-a9348c6940fb',	1),
(32,	1,	3,	1,	'camp1',	1734439197205,	0,	'fdasfd',	'7e8a3b1d-b83b-496a-8635-00bbf85e78c9',	0),
(33,	3,	4,	2,	'camp2',	1734440012787,	0,	'ssss',	'99fe8c7a-1f25-4e2f-b8fb-70fa50a67ef9',	1),
(34,	4,	3,	2,	'camp2',	1734440027939,	0,	'sss',	'f584da92-d3b8-4c21-8316-037190754941',	1),
(35,	4,	3,	2,	'camp2',	1734440029425,	0,	'sss',	'3abeee97-d433-46d3-8656-a8d9e6e83376',	1),
(36,	4,	3,	2,	'camp2',	1734440073426,	0,	'ddsd',	'9579bc06-709a-469a-97b3-081c7d88169e',	1),
(37,	4,	3,	2,	'camp2',	1734440080638,	0,	'ddd',	'95b8533e-367b-4619-b869-7aa6086f4038',	1),
(38,	3,	4,	2,	'camp2',	1734440106345,	0,	'dddd',	'cb2b5f1b-a34c-4e99-84d7-a50739fcf312',	1),
(39,	3,	4,	2,	'camp2',	1734440109986,	0,	'dfs',	'c589115d-309c-4d60-b0dd-ca8bdfabbac4',	1),
(40,	3,	4,	2,	'camp2',	1734440123186,	0,	'adada',	'95e7ed29-3d51-4b32-8a20-eb08af3021c5',	1),
(41,	3,	4,	2,	'camp2',	1734440126234,	0,	'sadasd',	'1b9af393-880a-46d6-a04a-15bedf06497a',	1),
(42,	3,	4,	2,	'camp2',	1734440128886,	0,	'dfasdf',	'3127b13f-a464-4790-b9ae-f4544a2397a9',	1),
(43,	3,	4,	2,	'camp2',	1734440274305,	0,	'sss',	'd152610a-0511-4aea-b042-f9aea631627e',	1),
(44,	3,	4,	2,	'camp2',	1734497140916,	0,	'sdfasdf',	'638144e3-906a-49d4-901b-6d925ecbb809',	1),
(45,	3,	4,	2,	'camp2',	1734497667555,	0,	'ddd',	'48fdbdf6-0c3b-4791-bfa2-f1a4057df71b',	1),
(46,	3,	4,	2,	'camp2',	1734498174490,	0,	'dfasfd',	'1947a0ab-507b-4c1a-8b04-55c8858eeed0',	1),
(47,	3,	4,	2,	'camp2',	1734498233977,	0,	'ddd',	'1df75320-53ef-4df5-a236-0d1966a26603',	1),
(48,	3,	4,	2,	'camp2',	1734498287341,	0,	'fdsaf',	'2e12b8d6-e1de-4935-8ff4-f1c7e447329f',	1),
(49,	3,	4,	2,	'camp2',	1734504562568,	0,	'dsdad',	'1a784de8-c3f1-4252-818c-c8afa7cbfcc8',	1),
(50,	3,	4,	2,	'camp2',	1734504618774,	0,	'dd',	'fb8474f0-e061-4de2-8fdb-5c01833e08a3',	1),
(51,	3,	4,	2,	'camp2',	1734511108131,	0,	'sss',	'94460f32-826b-44dd-9274-e15cc99bf398',	1),
(52,	3,	4,	2,	'camp2',	1734511425497,	0,	'ssssaaa',	'b4976a96-3dd9-4399-a000-fddb72289215',	1),
(53,	3,	4,	2,	'camp2',	1734511590304,	0,	'this is msg typing',	'13d4ffa7-b3a7-4aa4-9f12-de915ad48b0d',	1),
(54,	3,	4,	2,	'camp2',	1734512963198,	0,	'hello',	'c84346a3-33e8-4680-89a2-8d40edf4c5f8',	1),
(55,	3,	4,	2,	'camp2',	1734513005439,	0,	'hello this is nitish',	'60ec0e1c-67f3-4c30-bac5-4eb166a79bc8',	1),
(56,	5,	4,	2,	'camp2',	1734514508363,	0,	'sdfghjkm',	'39145b77-a0ac-491c-a22f-c855ee6c3055',	1),
(57,	5,	4,	2,	'camp2',	1734514784549,	0,	'asdsfdfgfsd',	'1a866bfa-d941-4a7d-b5b8-d5ca33cf7248',	1),
(58,	4,	5,	2,	'camp2',	1734514828363,	0,	'hrllo tis is nitish singh',	'ea472e99-bffe-40f0-8169-ef743d2a07ef',	1),
(59,	5,	4,	2,	'camp2',	1734514887984,	0,	'ff',	'617c2b44-8fcc-494f-883e-56bccd5e46d7',	1),
(60,	5,	4,	2,	'camp2',	1734521288648,	0,	'hii nitisha this soide',	'38c967cf-f873-475f-9b9e-fedc54b498ac',	1),
(61,	4,	5,	2,	'camp2',	1734521324477,	0,	'mohsin',	'ce53f723-ce76-4443-b363-045ccf4c3d6a',	1),
(62,	3,	5,	2,	'camp2',	1734524057592,	0,	'sdfasfdasd',	'fe27c5e6-b673-4cea-8d24-f376a207501d',	1),
(63,	5,	3,	2,	'camp2',	1734524080951,	0,	'hello this is nitish singh please tell me the truth',	'97bc5f34-d68c-4d88-b261-29b4c115df14',	1),
(64,	3,	5,	2,	'camp2',	1734524093163,	0,	'hello this is nitish singh please tell me the truth',	'695e8be1-1011-476e-909b-3a1508b7ce68',	1),
(65,	5,	3,	2,	'camp2',	1734524327976,	0,	'fdsafds',	'b7290bc6-27fc-4589-b7e4-e25d03145237',	1),
(66,	2,	5,	2,	'camp2',	1734528067912,	0,	'hello',	'cc188203-32a7-4866-9f80-775ca19133fa',	1),
(67,	5,	2,	2,	'camp2',	1734588935094,	0,	'xcczf',	'de02ca42-6c71-4f5b-9710-0c043984820f',	1),
(68,	2,	5,	2,	'camp2',	1734589034011,	0,	'sfasfasf',	'813a6ca7-3a6d-479e-913e-f920991cc07e',	1),
(69,	2,	5,	2,	'camp2',	1734589163386,	0,	'sadnfjkhasjdfaskjhdzfkjhajksdhjkfh',	'3bfc1254-3fc9-4756-9df6-70ebb26ccfe0',	1),
(70,	2,	5,	2,	'camp2',	1734589167739,	0,	'df',	'3cce6a11-11d2-4f4c-b718-f953d5fa8072',	1),
(71,	2,	5,	2,	'camp2',	1734589169564,	0,	'd',	'6851c3f5-6fca-4a22-807f-c12ca38ec804',	1),
(72,	2,	5,	2,	'camp2',	1734589169946,	0,	's',	'75af303c-afcf-45c1-a4cf-55dbd0431fac',	1),
(73,	2,	5,	2,	'camp2',	1734589170277,	0,	'a',	'facf7c7a-dee5-4b83-9682-6376c14cf6a7',	1),
(74,	2,	5,	2,	'camp2',	1734589170629,	0,	'd',	'908c08fe-eb25-42cd-afbd-39030d2aa001',	1),
(75,	2,	5,	2,	'camp2',	1734589171385,	0,	'f\'asdf',	'5ae3560e-e093-4638-a207-db0f5d56fb3b',	1),
(76,	2,	5,	2,	'camp2',	1734589171802,	0,	'sdf',	'2efd9d49-2a0a-40f7-be60-924ed107540c',	1),
(77,	2,	5,	2,	'camp2',	1734589188039,	0,	'dsfasfd',	'139a50a5-b4fa-43fc-b558-9f9da59f15ac',	1),
(78,	2,	5,	2,	'camp2',	1734589188360,	0,	'dsfa',	'a690a4a1-b53d-4772-8c7f-e891e5faf374',	1),
(79,	2,	5,	2,	'camp2',	1734589188642,	0,	'sadf',	'371be9c7-476e-4a45-97df-e0aa768bb08d',	1),
(80,	2,	5,	2,	'camp2',	1734589188886,	0,	'fds',	'43e7f681-0a52-4d15-921c-b97c2f3de6e5',	1),
(81,	2,	5,	2,	'camp2',	1734589189148,	0,	'fds',	'f184cd43-2831-4230-8e0b-4a2f02d91c15',	1),
(82,	2,	5,	2,	'camp2',	1734589189403,	0,	'asdf',	'934753e5-c512-4ba2-9226-1928ad96976c',	1),
(83,	2,	3,	2,	'camp2',	1734598242398,	0,	'dfghj',	'3f1be732-dc2d-4442-ae2a-714afb27b7b8',	1),
(84,	3,	2,	2,	'camp2',	1734598260218,	0,	'erfgthj',	'ff6be6cf-3c1a-4e86-8dcb-7a5ac17b5868',	1),
(85,	5,	3,	2,	'camp2',	1734599952364,	0,	'sdcefrvgtbhyju',	'628c3d58-18ce-4d2d-8a4b-d69d44309b47',	1),
(86,	5,	3,	2,	'camp2',	1734599967239,	0,	'd',	'6a50eabe-c2c7-4147-ba8a-ec2e4683c49e',	1),
(87,	5,	3,	2,	'camp2',	1734599968623,	0,	'd',	'309be968-3cfa-460d-ae18-9f7f76c93c05',	1),
(88,	5,	3,	2,	'camp2',	1734599971263,	0,	'd',	'24dc291d-56e1-4ac2-85cf-afca8a07e75d',	1),
(89,	5,	3,	2,	'camp2',	1734599973039,	0,	'd',	'e0275557-fdb0-44ef-b5ba-3f12c110492f',	1),
(90,	5,	3,	2,	'camp2',	1734599973577,	0,	'd',	'd887bc29-bb01-4a8b-b6b8-584fea384248',	1),
(91,	5,	3,	2,	'camp2',	1734599973934,	0,	'd',	'a0d92f55-8c96-415f-94fb-88dd82f660f8',	1),
(92,	5,	3,	2,	'camp2',	1734599974200,	0,	'd',	'eeade4b9-ceac-49d1-b752-8a5fc53958f3',	1),
(93,	5,	3,	2,	'camp2',	1734599974369,	0,	'd',	'a15b9921-4e69-4a99-8ee5-57ab22267791',	1),
(94,	5,	3,	2,	'camp2',	1734599974526,	0,	'ew',	'c58d5a13-4df3-49bc-b17f-d4e0a0b4ac9c',	1),
(95,	5,	3,	2,	'camp2',	1734599974850,	0,	'd',	'4aaa6471-8efb-4e7b-915c-e18335d50cb6',	1),
(96,	5,	3,	2,	'camp2',	1734599975158,	0,	'df',	'8966ea95-1a8d-4531-b6b1-8d6d20062299',	1),
(97,	5,	3,	2,	'camp2',	1734599975314,	0,	'f',	'e70674fc-0e6e-4c93-a2b9-2946f0e8b0ee',	1),
(98,	5,	3,	2,	'camp2',	1734599975605,	0,	'ss',	'f7b0e7d0-76f5-4275-8ac0-fb16bfe7974f',	1),
(99,	5,	3,	2,	'camp2',	1734599975760,	0,	'ads',	'60486575-e597-406e-a549-aeb09584923a',	1),
(100,	5,	3,	2,	'camp2',	1734599975922,	0,	'df',	'26ad2123-f334-41a9-8750-db101e581761',	1),
(101,	5,	3,	2,	'camp2',	1734599976082,	0,	'd',	'57c90eca-36e3-405d-b854-740b6bc1c634',	1),
(102,	5,	3,	2,	'camp2',	1734599976387,	0,	'sr',	'c5048eb7-1dbd-4aeb-963c-3d0fd93c706d',	1),
(103,	5,	3,	2,	'camp2',	1734599976539,	0,	't',	'99aa7b13-124f-4d9d-ba1b-a47e293b227f',	1),
(104,	5,	3,	2,	'camp2',	1734599976677,	0,	'e',	'd9761ead-13f0-401f-9994-5904c5fc9ec4',	1),
(105,	5,	3,	2,	'camp2',	1734599976842,	0,	'f',	'f7841f10-a181-4946-8d22-d361922a3a4d',	1),
(106,	5,	3,	2,	'camp2',	1734599976985,	0,	's',	'623798d0-5a50-4b0b-ab46-f56fadfadd97',	1),
(107,	5,	3,	2,	'camp2',	1734599977137,	0,	'd',	'559b63e7-e252-4a1c-94de-99fd69113f60',	1),
(108,	5,	3,	2,	'camp2',	1734599977311,	0,	'sf',	'c3a73e79-3120-4f57-9734-7f2c319a152c',	1),
(109,	5,	3,	2,	'camp2',	1734599977486,	0,	'we',	'fdaec053-a809-4f8d-be0a-8e9dca9526f7',	1),
(110,	5,	3,	2,	'camp2',	1734599977679,	0,	'f',	'61a52b1c-54fe-4674-a7ff-f09c71579d51',	1),
(111,	5,	3,	2,	'camp2',	1734599978016,	0,	'f',	'8076040a-88fa-4e1f-a220-b58fcf7efa93',	1),
(112,	5,	3,	2,	'camp2',	1734599978177,	0,	'e',	'f9a46995-4f65-47a8-9549-8f4719abba54',	1),
(113,	5,	3,	2,	'camp2',	1734599978324,	0,	'df',	'ca154864-c526-41fd-a3ef-71953a4e260f',	1),
(114,	2,	5,	2,	'camp2',	1734600359486,	0,	'g',	'b1e6144e-ba26-4ddc-a274-c8ed683ddba3',	1),
(115,	5,	3,	2,	'camp2',	1734603666755,	0,	'lol',	'99c7f44b-d7d7-49e1-873f-f8ca7bb0480d',	1),
(116,	2,	5,	2,	'camp2',	1734603723512,	0,	'jhgcfcghjkl;',	'7f66581f-b144-409f-84ef-f5c5fb9395c6',	1),
(117,	2,	3,	2,	'camp2',	1734604165579,	0,	'jhhghgh',	'bd24dafb-17f6-44d8-bac7-8e15d04f8440',	1),
(118,	3,	5,	2,	'camp2',	1734604965509,	0,	'sdrtyuiol;\'',	'181bed6c-55af-4c32-8a24-57ba3e1fbd8f',	1),
(119,	3,	5,	2,	'camp2',	1734604969968,	0,	'zsdcfvgbhnjmk,l;\'',	'9db98c2d-9dac-44af-9127-65c19e1bbc39',	1),
(120,	3,	2,	2,	'camp2',	1734604998207,	0,	'sdfg',	'600df0c3-567c-4fdd-b52e-f36bafe38b19',	1),
(121,	2,	5,	2,	'camp2',	1734605065580,	0,	'hhhhh',	'2da1c5c3-a3a0-4cce-a181-a9fafde22a71',	1),
(122,	5,	2,	2,	'camp2',	1734607819722,	0,	'hello',	'0d4d1cb9-ae29-4310-9e2e-dc65b95d97bf',	1),
(123,	3,	5,	2,	'camp2',	1734607844170,	0,	'd',	'2e87fbfb-cc46-48d2-bf98-62102702ca02',	1),
(124,	3,	5,	2,	'camp2',	1734607862541,	0,	'sss',	'24b76548-bf7c-42dc-9fea-67e9d51eec0d',	1),
(125,	2,	5,	2,	'camp2',	1734608304681,	0,	'sdfasdf',	'2131340f-dc69-4792-a0f9-0230c3f12049',	1),
(126,	2,	5,	2,	'camp2',	1734608330969,	0,	'sdfasfd',	'67fa46e0-4e66-483a-a47e-2a09abae108e',	1),
(127,	2,	5,	2,	'camp2',	1734608533676,	0,	'ddd',	'a62a025b-022e-445f-ab1a-241a9b1fe1b4',	1),
(128,	2,	5,	2,	'camp2',	1734608943793,	0,	'sadasad',	'804e0ff0-780e-4f9f-b930-355d9369a19e',	1),
(129,	2,	5,	2,	'camp2',	1734608951613,	0,	'sdfafd',	'e4647da8-4293-4cc7-86a7-2bc7da248e61',	1),
(130,	2,	5,	2,	'camp2',	1734609995401,	0,	'DSFASFD',	'86f575ee-f3d1-4ecb-a6a7-1ffd5abc6c00',	1),
(131,	2,	5,	2,	'camp2',	1734610019225,	0,	'DFASDSDAFFDSADSFDA',	'4320dc2f-43ae-4a62-97d9-73bea244b122',	1),
(132,	2,	5,	2,	'camp2',	1734611207757,	0,	'SDFASFD',	'dbc5f0bf-6daf-4023-83e0-55d687308166',	1),
(133,	2,	5,	2,	'camp2',	1734611418513,	0,	'sfdasfds',	'dc85465e-ea5f-40a6-bab9-df58372acc1e',	1),
(134,	2,	5,	2,	'camp2',	1734611484984,	0,	'xcvzxcv',	'9c6ab075-8ae2-44d6-b1e7-1ae0be265ba5',	0),
(135,	2,	5,	2,	'camp2',	1734611573049,	0,	'fsadf',	'c358602d-e6bb-4956-b441-a7de7ffc1e44',	0),
(136,	2,	5,	2,	'camp2',	1734611680432,	0,	'cxccx',	'79146c70-beb0-4aa0-8abf-96a4890f4d26',	0),
(137,	2,	5,	2,	'camp2',	1734611742227,	0,	'd',	'5448e2cb-4f58-4389-a3aa-43e4a8dc3bd8',	0),
(138,	2,	5,	2,	'camp2',	1734612060944,	0,	'sfdasfd',	'8c736917-921f-4a5c-9324-cff282c70b3d',	0),
(139,	2,	5,	2,	'camp2',	1734612205755,	0,	'ddd',	'5262903b-e5c5-447b-a744-bfb2e83ecac7',	0),
(140,	2,	5,	2,	'camp2',	1734612458478,	0,	'ddd',	'25b1c621-7b63-436e-9bad-edd5808b6c20',	1),
(141,	2,	5,	2,	'camp2',	1734612540216,	0,	'ddd',	'12674e6c-bdca-4e03-9c58-b4aec9d0b0c2',	1),
(142,	2,	5,	2,	'camp2',	1734612566640,	0,	'sdfasf',	'fe1b2380-c82c-4923-b04d-c0d712e3e165',	1),
(143,	2,	5,	2,	'camp2',	1734612608116,	0,	'dfsdf',	'36366ea4-93ff-4c92-ba4e-8b091929f651',	1),
(144,	2,	5,	2,	'camp2',	1734612629660,	0,	'fasf',	'a8f018da-d593-4b68-8b67-7e2d3e228b71',	1),
(145,	2,	5,	2,	'camp2',	1734612745655,	0,	'cvxxcv',	'107751d8-9a1c-45b4-ae84-f70d34fcd701',	1),
(146,	2,	5,	2,	'camp2',	1734612969893,	0,	'fsdasfd',	'137fbe7e-7dea-4659-b9dc-a5ccb2267845',	1),
(147,	2,	5,	2,	'camp2',	1734613078645,	0,	'sfdasfd',	'3e1187eb-7e40-4c41-9d01-5edd373fab28',	1),
(148,	2,	5,	2,	'camp2',	1734613084672,	0,	'fdasdf',	'3f36c106-4285-4aea-8147-5c03e811cee8',	1),
(149,	2,	5,	2,	'camp2',	1734613165352,	0,	'sdfasdf',	'ce35c894-3882-408e-8d9c-b745e7669190',	1),
(150,	2,	5,	2,	'camp2',	1734613235636,	0,	'sfdasdf',	'fb4d30f2-0655-4c8f-8e56-5ca3c5ab6be1',	1),
(151,	2,	5,	2,	'camp2',	1734613682958,	0,	'dd',	'53e2eba1-1d43-40b3-8999-02b5d8f5463d',	1),
(152,	2,	5,	2,	'camp2',	1734613754009,	0,	'sdfsdf',	'57effef4-fa25-429f-86c5-7b25e7dc514d',	1),
(153,	2,	5,	2,	'camp2',	1734613826870,	0,	'dssasd',	'22037808-0fcc-4ae6-b33d-bfa743f99348',	1),
(154,	2,	5,	2,	'camp2',	1734614884910,	0,	'ddd',	'0948f574-570e-4e76-94c4-feb2969d2a97',	1),
(155,	2,	5,	2,	'camp2',	1734614927652,	0,	'dssdfasf',	'5b8609dc-369e-4e7e-8248-4a7bdbaa66a2',	1),
(156,	2,	3,	2,	'camp2',	1734671671432,	0,	'sdsfadf',	'4431d3e2-4d49-4a3e-ab1b-add46b995a40',	1),
(157,	2,	3,	2,	'camp2',	1734671694424,	0,	's',	'e1fc036b-8144-425f-9a10-7a8f89bd6d22',	1),
(158,	5,	3,	2,	'camp2',	1734671750126,	0,	'd',	'96ea3ba0-7e6f-46ae-8f18-bc78ec0b567a',	1),
(159,	5,	3,	2,	'camp2',	1734672111013,	0,	'dsfasf',	'f994e0b0-3490-4103-a896-fa781f9178f6',	1),
(160,	5,	3,	2,	'camp2',	1734672153094,	0,	'ds',	'baaa84c3-3f4a-4c96-85e7-9124f977406d',	1),
(161,	5,	3,	2,	'camp2',	1734672211312,	0,	'sdfadf',	'2453345a-87d4-4799-9068-4b2ab1f146ed',	1),
(162,	5,	3,	2,	'camp2',	1734672260557,	0,	'dfasdf',	'36b03309-a5ab-4688-a333-2cdd370c56a6',	1),
(163,	2,	3,	2,	'camp2',	1734677817039,	0,	'hello',	'741d78bc-e581-40fe-8d65-50ac52179019',	1),
(164,	2,	3,	2,	'camp2',	1734677838391,	0,	'yes what are you doing',	'023b8db5-3fc8-4c60-b3e9-aa12cd438efc',	1),
(165,	3,	6,	2,	'camp2',	1734695458368,	0,	'sdfasfd',	'bbd2a291-e775-478f-86c9-58bf5a16f393',	1),
(166,	6,	3,	2,	'camp2',	1734695462720,	0,	'fsdasf',	'32b0f531-6d04-4e68-9372-17b7cbf1acc1',	1),
(167,	3,	6,	2,	'camp2',	1734695478576,	0,	'ddd',	'abb475d6-851c-4a7c-ad3d-edfab892c60f',	1),
(168,	6,	7,	3,	'testwebrtc',	1734698339847,	0,	'dsfasdf',	'3e595e9b-3450-4aea-a0fd-ae040b5df70e',	1),
(169,	7,	6,	3,	'testwebrtc',	1734698354099,	0,	'cvcvc',	'75634e25-e6c4-43f3-8d5b-a114aeaec113',	1),
(170,	7,	6,	3,	'testwebrtc',	1734698359721,	0,	'hello',	'2aedefc4-b0a9-45b9-9f5b-348ce6c4d70d',	1),
(171,	6,	7,	3,	'testwebrtc',	1734698370062,	0,	'sdfsaf',	'0e205601-8b43-4693-9f36-f79a9b8afc11',	1),
(172,	6,	9,	3,	'testwebrtc',	1734698636943,	0,	'sdfasdf',	'0fa1cc82-1499-472e-ac17-260a3bdc7dbe',	1),
(173,	6,	9,	3,	'testwebrtc',	1734698641352,	0,	'sdfasdfdsf',	'fea73046-da90-418d-96a3-65df21f7e3e7',	1),
(174,	6,	9,	3,	'testwebrtc',	1734699208253,	0,	'ijkl',	'2ecf1df5-cfd1-451f-b945-215038f17231',	1),
(175,	3,	2,	2,	'camp2',	1734934031405,	0,	'ddedeeded',	'ce9d3bab-3fa1-459c-b665-deb851f68056',	1),
(176,	3,	1,	2,	'camp2',	1734934113611,	0,	'edeed',	'580eeea5-2d27-4b03-882a-bf75134d33af',	1),
(177,	1,	3,	2,	'camp2',	1734934120891,	0,	'hi',	'e5e5253a-caad-4567-978a-03ce7dfacc26',	1),
(178,	3,	1,	2,	'camp2',	1734934129206,	0,	'yes',	'bf5d228c-2501-4a57-a524-7f140efb4ce0',	1),
(179,	5,	1,	2,	'camp2',	1734934157646,	0,	'fddasdfasdf',	'8103210d-fef2-419a-a6a0-5598fe2accd0',	1),
(180,	1,	5,	2,	'camp2',	1734934737845,	0,	'hello',	'1c8db705-d11d-4c74-9b6b-b3aae9344b73',	0),
(181,	1,	5,	2,	'camp2',	1734934743637,	0,	'hello',	'6c1fccf5-584b-4a2f-8a2d-f2fd31dcfe56',	0),
(182,	1,	3,	2,	'camp2',	1734934747998,	0,	'hello',	'ad375319-ed81-432b-9b25-1e0f6653510e',	1),
(183,	1,	2,	2,	'camp2',	1734934754768,	0,	'hello',	'26beed1a-fd81-4724-8ea0-068b3056cf9f',	1),
(184,	1,	5,	2,	'camp2',	1734934874032,	0,	'Rajjan',	'30e23fe0-aeb2-4b7b-8916-3a7c675e3722',	0),
(185,	2,	1,	2,	'camp2',	1734934791717,	0,	'fdhasdfh',	'c49632fd-4734-4afc-ba4e-87ad93e2b104',	1),
(186,	1,	2,	2,	'camp2',	1734934913445,	0,	'Rajjan Kumar',	'ec38344e-5041-42ec-afcc-96cb04ef0010',	1),
(187,	3,	5,	2,	'camp2',	1734934815988,	0,	'rfrfr',	'09be0f76-4b01-4f2a-9b1d-aa2f45377c9d',	0),
(188,	1,	5,	2,	'camp2',	1734934834204,	0,	'hello',	'd5d0f45f-c9d1-4064-b9ea-6acbf5687995',	0),
(189,	1,	2,	2,	'camp2',	1734934959464,	0,	'Mere pass koi message nai aa raha hai',	'09729437-2a92-4e85-b127-50738424dff6',	1),
(190,	1,	2,	2,	'camp2',	1734935009415,	0,	'Hi Alok how are you',	'd34d305f-0aa5-4046-97f4-90d5f627b625',	1),
(191,	2,	1,	2,	'camp2',	1734934912568,	0,	'hi sir',	'138c473d-a005-46b7-a164-a183c8f61417',	1),
(192,	1,	2,	2,	'camp2',	1734935031144,	0,	'I am fine thank u',	'bd208ae2-155b-4bd1-9581-b59401d3fc5e',	1),
(193,	2,	1,	2,	'camp2',	1734934988056,	0,	'this is testing',	'98183ed1-fff7-446c-a6e9-561139fd002b',	1),
(194,	3,	5,	2,	'camp2',	1734935018676,	0,	'rfrfr',	'8eb66efd-a596-4f77-b87d-7149fe88affc',	0),
(195,	3,	1,	2,	'camp2',	1734935028806,	0,	'rfrf',	'f2a7bffc-ae62-4bfb-8004-64dc94ea98a0',	0),
(196,	1,	2,	2,	'camp2',	1734935149248,	0,	'Today is Monday waiting for holiday',	'09d4f546-6a47-4673-a489-d8e2040c27e9',	0),
(204,	41,	40,	17,	'testwebrtc',	1734959444531,	0,	'dfasfd',	'da14ca46-4617-4541-898c-e44c483c1398',	1),
(205,	40,	41,	17,	'testwebrtc',	1734959459040,	0,	'yes',	'33bbbfa9-d6e8-4bb1-b6e2-f45c4087f698',	1),
(206,	41,	40,	17,	'testwebrtc',	1734959466561,	0,	'ok',	'0a8ddd4c-f3f5-453e-a653-60dcca149084',	1),
(207,	41,	40,	17,	'testwebrtc',	1734959552547,	0,	'hello guys',	'461c7b62-0809-4647-a972-8795bcbed618',	1),
(208,	41,	40,	17,	'testwebrtc',	1734959562394,	0,	'how are you',	'f327886e-3b49-43e7-af85-db045566736e',	1),
(209,	41,	40,	17,	'testwebrtc',	1734959569795,	0,	'i am so fine',	'df94316e-93c8-44af-ae54-8536602c499f',	1),
(210,	41,	40,	17,	'testwebrtc',	1734959571348,	0,	'kekel',	'c58c4632-ddc8-4aff-a025-83ffced285f2',	1),
(211,	41,	40,	17,	'testwebrtc',	1734959572451,	0,	'jdslfjsdklfd',	'df9b8f2b-6778-414c-877a-06f5b0eea016',	1),
(212,	41,	40,	17,	'testwebrtc',	1734959573459,	0,	'jldjfkld',	'6d6c7019-2e71-487b-b8c5-af1555a6fe41',	1),
(213,	41,	40,	17,	'testwebrtc',	1734959574466,	0,	'klsdjfklsds',	'4c816459-05e8-42f7-bfa2-9037bf349a65',	1),
(214,	41,	40,	17,	'testwebrtc',	1734959575635,	0,	'dklfjsdklf',	'5b122545-0d5b-4c1e-87f8-0c72362e6582',	1),
(215,	40,	41,	17,	'testwebrtc',	1734959581319,	0,	'fsafsda',	'0c1608a5-b53f-42ce-8ade-26bf86da51a9',	1),
(216,	41,	40,	17,	'testwebrtc',	1734959584145,	0,	'skdjklasjdklas',	'9cb16166-c035-4c76-a302-7b6a72d7a66b',	1),
(217,	41,	40,	17,	'testwebrtc',	1734959586327,	0,	'jklsjdklasjdlkas',	'0a58ce03-c00e-4f18-8014-3b297434983f',	1),
(218,	42,	40,	17,	'testwebrtc',	1734959669014,	0,	'hello',	'bf96d32b-5187-433c-b65f-38873456cbb1',	1),
(219,	42,	41,	17,	'testwebrtc',	1734959672945,	0,	'dfdfd\\',	'd3b83a00-64b1-4174-987f-00d3543a1dc4',	1),
(220,	40,	41,	17,	'testwebrtc',	1734959681638,	0,	'gsdg',	'1e0c86e4-a68f-4274-8c0f-afd54cc855a3',	1),
(221,	40,	42,	17,	'testwebrtc',	1734959718620,	0,	'hello this is nitish',	'e42634eb-c340-4082-8988-016b5868244c',	1),
(222,	42,	41,	17,	'testwebrtc',	1734959719757,	0,	'dfdfd',	'd90cec9e-8c43-42fe-bf1b-c4de73dd3eb2',	1),
(223,	42,	41,	17,	'testwebrtc',	1734959726160,	0,	'dfdfd',	'de074a64-0cc3-4327-b20c-d1e599a7518c',	1),
(224,	41,	40,	17,	'testwebrtc',	1734959731043,	0,	'ddfdfd',	'1e2229f0-294e-44fe-b95f-1dc58df6ba47',	1),
(225,	41,	40,	17,	'testwebrtc',	1734959732728,	0,	'dfdfd',	'cc2f94ca-1509-4945-9a28-5860e64705c9',	1),
(226,	41,	40,	17,	'testwebrtc',	1734959733200,	0,	'df',	'c013faf0-e775-4e08-939a-f2f8441468cc',	1),
(227,	41,	40,	17,	'testwebrtc',	1734959733511,	0,	'df',	'61313515-2ebb-40a3-bf99-f14d2f84d51e',	1),
(228,	41,	40,	17,	'testwebrtc',	1734959733786,	0,	'df',	'85b1dfff-b520-4065-aaa1-28f0d427b8b2',	1),
(229,	41,	40,	17,	'testwebrtc',	1734959734038,	0,	'df',	'60d3a1bb-9973-48bc-88d8-392cd8d9cd0f',	1),
(230,	41,	40,	17,	'testwebrtc',	1734959734303,	0,	'df',	'30935343-31f8-42d9-861a-dcc35e5f118f',	1),
(231,	41,	40,	17,	'testwebrtc',	1734959734576,	0,	'df',	'8bf48bfd-cde8-42b9-b9bc-1f6d393d8072',	1),
(232,	41,	40,	17,	'testwebrtc',	1734959734801,	0,	'df',	'faf994ed-a08e-40a5-92b0-eefa100e6597',	1),
(233,	41,	40,	17,	'testwebrtc',	1734959736969,	0,	'df',	'200b3bbe-0ebd-48c7-a113-78ede796bac4',	1),
(234,	41,	40,	17,	'testwebrtc',	1734959737182,	0,	'd',	'd25d836b-08ce-4dca-b00e-0938fbc24720',	1),
(235,	41,	40,	17,	'testwebrtc',	1734959738018,	0,	'fdfdfdf',	'2a978803-9644-4cb7-a0d4-613fe58c5b79',	1),
(236,	41,	40,	17,	'testwebrtc',	1734959738785,	0,	'df',	'49493471-4a50-4813-b1bb-9ee8d8452a2c',	1),
(237,	41,	40,	17,	'testwebrtc',	1734959739081,	0,	'df',	'0607ec1c-e8e3-4936-b450-ce4bfae548ca',	1),
(238,	41,	40,	17,	'testwebrtc',	1734959739492,	0,	'dd',	'827bfb7a-b87a-4e39-b65e-e742e4754106',	1),
(239,	41,	40,	17,	'testwebrtc',	1734959740415,	0,	'fdfdfd',	'33f83201-239c-4438-957f-0ab34ec9126a',	1),
(240,	41,	40,	17,	'testwebrtc',	1734959740719,	0,	'fd',	'89a6557e-8521-4380-b6c1-319339e9433d',	1),
(241,	41,	40,	17,	'testwebrtc',	1734959741060,	0,	'fd',	'43b223fe-5895-4ac9-a4c7-1eb0024bfca8',	1),
(242,	41,	40,	17,	'testwebrtc',	1734959741397,	0,	'fd',	'e0b46573-c7c5-4e8b-a883-c3ef0f98d223',	1),
(243,	41,	40,	17,	'testwebrtc',	1734959741750,	0,	'fdf',	'2f52a722-c988-47e9-ae37-ae838cc43e31',	1),
(244,	41,	40,	17,	'testwebrtc',	1734959742253,	0,	'd',	'320f6a0f-3895-4ca7-8222-c687056764dd',	1),
(245,	41,	40,	17,	'testwebrtc',	1734959742630,	0,	'df',	'7563f76a-3852-447d-bc8f-b75a69d2be47',	1),
(246,	41,	40,	17,	'testwebrtc',	1734959742934,	0,	'df',	'98b6190f-5d31-4621-b484-7c36aa647d2e',	1),
(247,	41,	40,	17,	'testwebrtc',	1734959743379,	0,	'd',	'5bdeaa7d-df7d-4289-87dc-e8cf0f07dd84',	1),
(248,	41,	40,	17,	'testwebrtc',	1735029759255,	0,	'hrllo',	'c6253093-6082-4314-863f-0b8bfa3754eb',	1),
(249,	40,	41,	17,	'testwebrtc',	1735029770495,	0,	'yes',	'bf67d0b8-b985-49ff-87a9-3fba646c6ae4',	1),
(250,	40,	41,	17,	'testwebrtc',	1735030122994,	0,	'hello',	'276d86d8-0d02-40e0-ade5-e239fbf415c4',	1),
(251,	41,	40,	18,	'demoptl',	1735030134919,	0,	'yes',	'd6cb65c4-a786-4490-9c40-6c789990da28',	1),
(252,	40,	41,	17,	'testwebrtc',	1735031019514,	0,	'hello',	'dd11fa4f-d962-408c-b16f-1b474939eb08',	1),
(253,	40,	41,	17,	'testwebrtc',	1735031044149,	0,	'he',	'21b7334d-3fe3-49cf-bfff-b6de53a9ea19',	1),
(254,	40,	41,	17,	'testwebrtc',	1735031483463,	0,	'hello',	'fdd4c58a-379a-4093-8133-c6586e7f4973',	1),
(255,	40,	41,	17,	'testwebrtc',	1735031980660,	0,	'heloo',	'53aef4f2-d159-4a8c-ba8e-c14c1cbb4652',	1),
(256,	40,	41,	17,	'testwebrtc',	1735031990000,	0,	'hello',	'e6bcb66f-3e55-475e-b950-63447618b3d0',	1),
(257,	42,	40,	17,	'testwebrtc',	1735032129438,	0,	'kalabalaaaaaa',	'77d47b63-a32f-4938-bf1a-bfc9d9511583',	1),
(258,	40,	42,	17,	'testwebrtc',	1735032147646,	0,	'hello',	'04b6588d-ab3c-4b6c-982c-d0ef4890887e',	1),
(259,	42,	40,	17,	'testwebrtc',	1735032157554,	0,	'yes',	'd9cf22bb-7026-435c-a60d-d269c8cdd9a8',	1),
(260,	40,	41,	17,	'testwebrtc',	1735032252264,	0,	'hello',	'8c40f119-cf51-4f18-8841-b9b9432c29cb',	1),
(261,	41,	40,	17,	'testwebrtc',	1735032264545,	0,	'yess',	'4860db41-f1e7-48eb-bf48-361defa7031b',	1),
(262,	41,	40,	17,	'testwebrtc',	1735032270588,	0,	'gf',	'95f0da8f-5c33-4c8e-a3c4-576e8fe91e73',	1),
(263,	40,	41,	17,	'testwebrtc',	1735032274513,	0,	'fdsaf',	'725fef7d-0cbf-4482-9a06-62e088a211df',	1),
(264,	40,	41,	17,	'testwebrtc',	1735032283588,	0,	'wrqwer',	'bd2080b6-4f42-4a23-ae26-d74be38f1abb',	1),
(265,	40,	41,	17,	'testwebrtc',	1735032326203,	0,	'hello',	'd75c89a7-b805-4571-9598-3195467ea89f',	1),
(266,	40,	41,	17,	'testwebrtc',	1735032338759,	0,	'hello',	'dc5069ee-4d36-4e56-be44-81582c963e52',	1),
(267,	40,	41,	17,	'testwebrtc',	1735032346852,	0,	'3',	'206991aa-b2f8-4953-8292-0a5ae2792b7b',	1),
(268,	40,	41,	17,	'testwebrtc',	1735032349319,	0,	'4',	'a1ec7ad0-3861-40e6-9196-8a5432810135',	1),
(269,	40,	41,	17,	'testwebrtc',	1735032351901,	0,	'5',	'e5a4d3ce-39d3-48b7-afc7-c6711bd45ebc',	1),
(270,	42,	40,	17,	'testwebrtc',	1735032438940,	0,	'hii',	'0955afd5-a339-4c13-bff0-4852006b099e',	1),
(271,	40,	41,	17,	'testwebrtc',	1735034850319,	0,	'sdfasdf',	'f7beeb97-1d64-4c12-a023-37b63061a859',	1),
(272,	40,	41,	17,	'testwebrtc',	1735035559643,	0,	's',	'06ec83a1-e422-409d-984c-d172fe783031',	1),
(273,	41,	40,	17,	'testwebrtc',	1735532576653,	0,	'yes',	'c687aa35-69d3-4102-bc4b-8196b836cd2b',	1),
(274,	40,	41,	17,	'testwebrtc',	1735532593031,	0,	'hello',	'6e188516-c828-455e-8fef-cf5d0b64de1f',	1),
(275,	41,	40,	18,	'demoptl',	1735556358937,	0,	'yesy',	'f8502a3b-f9cb-4282-81d5-57585ef2e6af',	1),
(276,	40,	41,	18,	'demoptl',	1735556367342,	0,	'fdafsd',	'de9ee749-181a-4dbd-8e07-9800cf3cd7e4',	1),
(277,	41,	40,	18,	'demoptl',	1735556393563,	0,	'hello',	'32b2434e-dd81-42f7-bea2-d7959ae8c10b',	1),
(278,	41,	40,	18,	'demoptl',	1735556396568,	0,	'testing',	'dfcbd6fe-53ff-4a25-a166-1d985d6b00ac',	1),
(279,	41,	40,	17,	'testwebrtc',	1735636580337,	0,	'fdasdfasfdsadf',	'092cb31c-0475-49dc-816a-b3261fe654f0',	1),
(280,	40,	41,	17,	'testwebrtc',	1735636586242,	0,	'dfasfdasdfasdfasdfasdf',	'4daf6b88-3829-4583-92e1-43e7272f19ee',	1),
(281,	41,	40,	17,	'testwebrtc',	1735636592896,	0,	'hello',	'7fe59097-8b98-42ff-b34d-920329c2bfe2',	1),
(282,	42,	43,	17,	'testwebrtc',	1735902397947,	0,	'dffdfd',	'87edd888-b4ba-4287-be6c-d455f0187005',	1),
(283,	43,	40,	17,	'testwebrtc',	1735902399998,	0,	'lol',	'a80cb469-97be-4431-bf91-5e26439b2e89',	1),
(284,	42,	43,	17,	'testwebrtc',	1735902401954,	0,	'hello udit',	'e5264578-aa1a-483d-a1ad-1bfab60aca2a',	1),
(285,	42,	40,	17,	'testwebrtc',	1735902410884,	0,	'testing data',	'13bed938-a103-4a9e-983c-4a1f5dacbb6d',	1),
(286,	43,	42,	17,	'testwebrtc',	1735902410990,	0,	'lul',	'3d9ba1a9-7f94-4128-b965-1ff17538a195',	1),
(287,	43,	40,	17,	'testwebrtc',	1735902423576,	0,	'kya chate ho bhai?',	'4f80a197-9357-4555-bf6d-eaccff1ec917',	1),
(288,	43,	42,	17,	'testwebrtc',	1735902431671,	0,	'maje lo',	'976eecc7-c532-4ff4-91e9-de38d5145cfd',	1),
(289,	43,	42,	17,	'testwebrtc',	1735902433021,	0,	'maje\\',	'aef5215e-aa17-4479-a457-bb28a25c7e6d',	1),
(290,	43,	40,	17,	'testwebrtc',	1735902440957,	0,	'kkrc',	'70b9a729-9e2f-48e5-874d-a4e0d4cdef3f',	1),
(291,	40,	43,	17,	'testwebrtc',	1735902463772,	0,	'lul/0',	'4bbba97a-ba21-4207-ac75-d7b93708aba3',	1),
(292,	40,	43,	17,	'testwebrtc',	1735902473981,	0,	'hello this is nitish',	'b62609b0-7771-44d9-b121-a3d2ae70348c',	1),
(293,	42,	43,	17,	'testwebrtc',	1735902538696,	0,	'<b>Testinmg</b>',	'0c4d4820-5505-4242-930f-80ef085e5d6d',	1),
(294,	42,	43,	17,	'testwebrtc',	1735902564066,	0,	'hi',	'c7eb08fd-b13c-4749-80fd-9b299ac064d8',	1),
(295,	40,	42,	17,	'testwebrtc',	1735902655883,	0,	'Economists had long argued that asset prices were essentially random and unpredictable—and that past price action had little or no influence on future changes. This, indeed, was a key assumption of the efficient market hypothesis (EMH). Random walk theory is based on the idea that stock prices reflect all available information and adjust quickly to new information, making it impossible to act on it.  Economist Burton Malkiel’s theory aligns with the semi-strong efficient hypothesis, which also argues that it is impossible to consistently outperform the market. The theory thus has important implications for investors, suggesting that buying and holding a diversified portfolio may be the best long-term investment strategy.',	'47f74bd3-a464-4654-bba5-841ce64c6f86',	1),
(296,	40,	42,	17,	'testwebrtc',	1735902759198,	0,	'const { raw } = require(\"mysql\") const Group = require(\"../moddle/group\"); const User = require(\"../moddle/User\"); const Message = require(\"../moddle/Message\"); const GroupMembers = require(\"../moddle/group.member\"); const { BaseHttpResponse, ERROR_CODE } = require(\"../utills/error\"); const { emitToUser } = require(\"../socket/socket.io\"); const { EVENT_NAME } = require(\"../socket/socket.event\"); const Webrtc_Message = require(\"../moddle/campaign/message\"); const { Op } = require(\'sequelize\'); const { rows } = require(\"mssql\"); const Campaign = require(\"../moddle/campaign/campaign\"); const CampaignMember = require(\"../moddle/campaign/campaign.member\"); const Webrtc_user = require(\"../moddle/campaign/user\"); const  app  = require(\"../../../app\"); const { isUserOnline } = require(\"../utills/socket.user\");  exports.fetchGroupById = async (groupId) => {     const group = await Group.findOne({         where: { groupId: groupId },         raw: true     })     return group; } exports.createGroup = async (groupId, groupName) => {     const group = await Group.create({         groupId: groupId,         name: groupName     })     return group; } exports.createGroupMember = async (groupId, member) => {     let memberData={         user_id:member.client_user_id,         name:member.agent,         user_mode_id: 1,         login_id: 1     };     let user=Webrtc_user.findOrCreate({         where: { user_id: member.client_user_id },         defaults: memberData,     })     const group = await GroupMembers.create({         groupId:groupId,         memberId: user.id,         member_user_id: member.client_user_id     })     return group; } exports.getGroupMember = async (groupId) => {     const group = await GroupMembers.findAll({         where:{groupId:groupId},         raw:true,     })     return group; } exports.getUserByUserId = async (user_id) => {     const group = await User.findOne({         where:{user_id:user_id},         raw:true,     })     return group; } exports.createUser = async (data) => {     const group = await User.create(data)     return group; } exports.getAndCreateGroupInfo = async (groupInfo, user) => {     try {         const groups = await Promise.all(             groupInfo.map(async (g) => {                 // Fetch or create the group                 let groupData = await this.fetchGroupById(g.id);                 if (!groupData) {                     groupData = await this.createGroup(g.id, g.group_name);                 }                  // Fetch existing group members                 let existingMembers = await this.getGroupMember(groupData.id);                  // Find members to be added                 const existingMemberIds = existingMembers.map((member) => member.member_user_id);                 const membersToAdd = g.memberList.filter(                     (member) => !existingMemberIds.includes(member.user_id)                 );                  // Add missing members                 if (membersToAdd.length > 0) {                     const newMembers = await Promise.all(                         membersToAdd.map(async (member) => {                             return this.createGroupMember(groupData.id, member);                         })                     );                     existingMembers = [...existingMembers, ...newMembers];                 }                  // Perform additional operations with `groupData` if needed                 return { groupData, members: existingMembers };             })         );          return groups;     } catch (error) {         console.error(\"Error in getAndCreateGroupInfo:\", error);         throw error; // Re-throw error for the caller to handle     } };      exports.getMsg = async (senderId, receiverId, campaignId, pageNumber = 1, pageSize = 10, isGroupMsg) => {     const offset = (pageNumber - 1) * pageSize; // Calculate offset     console.log(\"pageNumber\", pageNumber, \"pageSize\", pageSize);      const messageConditions = isGroupMsg         ? { campaignId } // Filter by campaignId for group messages         : {               [Op.or]: [                   { senderId, receiverId },                   { senderId: receiverId, receiverId: senderId },               ],               campaignId,           };      // Fetch messages     const { count: totalMessages, rows: messages } = await Webrtc_Message.findAndCountAll({         where: messageConditions,         order: [[\'id\', \'DESC\']], // Order by latest messages         limit: pageSize, // Number of messages per page         offset, // Starting point for the current page     });      // Sort messages in ascending order (optional)     messages.sort((m1, m2) => m1.id - m2.id);      // Update isMsgReceived for matching messages     const updatedMessages = [];     for (const message of messages) {         if (message.receiverId === senderId) {             message.isMsgReceived = true;             await Webrtc_Message.update(                 { isMsgReceived: true },                 { where: { id: message.id } } // Update by message ID             );             updatedMessages.push({ ...message.dataValues, isMsgReceived: true });         } else {             updatedMessages.push(message.dataValues);         }     }      // Return total messages and updated messages     return { totalMessages, messages: updatedMessages }; };   exports.sendMessage=async(socket, body)=>{     let bodyJson={         senderId: socket.data.id,         receiverId: Number(body.receiverId),         campaignId:  Number(body.campaignId),         campaignName:  body.campaignName,         timestamp: body.timestamp,         isGroupMsg: body.type===\'group\',         msgText: body.msgText,         localMessageId: body.localMessageId     }     // console.log(\"enter data in msg\",body);     const messages = await Webrtc_Message.create(bodyJson);     if (!messages) {         return BaseHttpResponse([],null, ERROR_CODE.OK)     }     // console.log(\"this is message array\",messages);     const userData = await Webrtc_user.findOne({             where: { id: bodyJson.receiverId},         raw: true,     });     console.log(\"recieved Msg from \",bodyJson.receiverId,\'to\',socket.data.id)     if (userData.currentloginCampaignId==bodyJson.campaignId) {         emitToUser(socket.server, bodyJson.receiverId, \'receiveMsg\', messages);          }          return BaseHttpResponse(messages.dataValues,null, ERROR_CODE.OK)      }     exports.sendNotification = async (socket, body) => {         try {             console.log(\"thi sis the notification body\",body,typeof(body.campaignId));             // Fetch campaign members except the sender and check if users are online             let camMemberlist = await CampaignMember.findAll({                 where: { campaignId: body.campaignId },                 raw: true,             });             // console.log(\"isUserOnline\",isUserOnline);             camMemberlist = await Promise.all(                 camMemberlist                     .filter(e => e.memberId != socket.data.id && isUserOnline(Number(e.memberId))) // Exclude sender and check online status                     .map(async e => {                         try {                             // Fetch user data if online                             const userData = await Webrtc_user.findOne({                                     where: { id: e.memberId ,currentloginCampaignId: body.campaignId},                                 raw: true,                             });                                          if (!userData) {                                 console.warn(`User data not found for memberId ${e.memberId}`);                                 return null; // Skip if user data not found                             }                             // Count unseen messages for each member                             const { count } = await Webrtc_Message.findAndCountAll({                                 where: {                                     senderId: e.memberId,                                     receiverId: socket.data.id,                                      campaignId: e.campaignId,                                     isMsgReceived: false,                                 },                                 raw: true,                             });                                                          return { ...userData, unSeenMsg: count }; // Add unseen messages to user data                         } catch (error) {                             console.error(`Error processing memberId ${e.memberId}:`, error);                             return null; // Handle errors gracefully                         }                     })             );                          // Filter out null values             camMemberlist = camMemberlist.filter(Boolean);                           // Sorting members - sender\'s message first if needed             camMemberlist.sort((a, b) => a.id === body.senderId ? -1 : 1);              console.log(\"Message notification camMemberlist:\", camMemberlist);              // Emit the message to the receiver             // emitToUser(socket.server, body.receiverId, \'receiveMsg\', camMemberlist);              return BaseHttpResponse(camMemberlist, null, ERROR_CODE.OK);         } catch (error) {             console.error(\"Error in sendNotification:\", error);             return BaseHttpResponse(null, { message: error.message }, ERROR_CODE.FAILED);         }     };     exports.newUserConnected = async (socket, body) => {         try {             // Fetch campaign members except the sender and check if users are online             let camMemberlist = await CampaignMember.findAll({                 where: { campaignId: body.id },                 raw: true,             });             // console.log(\"ewUser connected member list: \", camMemberlist);             camMemberlist = await Promise.all(                 camMemberlist                     .filter(e =>e.memberId != socket.data.id && isUserOnline(Number(e.memberId))) // Exclude the sender and check online status                     .map(async e => {                         try {                             // Fetch user data                             const userData = await Webrtc_user.findOne({ where: { id: e.memberId,currentloginCampaignId:body.id }, raw: true });                             return { ...userData }; // Add unseen messages to user data                         } catch (error) {                             console.error(`Error processing memberId ${e.memberId}:`, error);                             return null; // Handle errors gracefully                         }                     })             );                       camMemberlist = camMemberlist.filter(data => data !== null && Object.keys(data).length > 0);             console.log(\"Message notification camMemberlist:\", camMemberlist);             // Emit the message to the receiver             if (camMemberlist.length>0) {                 for(let a of camMemberlist){                     emitToUser(socket.server, a.id, \'newMemberOnline\', camMemberlist);                 }             }                 return BaseHttpResponse(camMemberlist, null, ERROR_CODE.OK);                       } catch (error) {             console.error(\"Error in sendNotification:\", error);             return BaseHttpResponse(null, { message: error.message }, ERROR_CODE.FAILED);         }     };      exports.msgReceived = async (socket,body)=>{         try {             let getMsg= await Webrtc_Message.findByPk(body.id);             getMsg.isMsgReceived=true;             getMsg.save();             return getMsg;                      } catch (error) {             return BaseHttpResponse(null,`error while updating isMsgReceived error id:${error}`)         }      }',	'bffb0e12-fc4e-409e-9612-fd8150fb10eb',	1),
(297,	42,	40,	17,	'testwebrtc',	1735902809675,	0,	'<b>Hello this is testing</b>',	'15b36207-b5df-483c-98c8-a6edf148e7da',	1),
(298,	42,	40,	17,	'testwebrtc',	1735902996586,	0,	'<a id=\"myAnchor\" href=\"jsref_obj_array.asp\">JavaScript Arrays</a>',	'd296f684-7e22-479f-9e29-e73f38d09050',	1),
(299,	43,	40,	17,	'testwebrtc',	1735903078453,	0,	'frfrjrf',	'298f1875-324a-43dd-8993-143a808d4067',	1),
(300,	43,	42,	17,	'testwebrtc',	1735903102901,	0,	'ffr',	'ca8c2564-7835-41c9-a7d1-743dfaa06570',	0),
(301,	43,	42,	17,	'testwebrtc',	1735903115618,	0,	'*lfvj*',	'35c0d4f5-23a0-4d31-a473-a0dada454af6',	0),
(302,	43,	40,	17,	'testwebrtc',	1735903152908,	0,	'aa rha he sir g baut',	'6e5b0d34-3871-4092-8c19-5bddce0465dd',	1),
(303,	43,	40,	17,	'testwebrtc',	1735903255299,	0,	'name',	'1ae6f162-8355-446e-91d0-4484af3dede7',	1),
(304,	43,	40,	17,	'testwebrtc',	1735903271003,	0,	'type=\"text\" id=\"mobile_number\" name=\"mobile_number\" placeholder=\"8080890909\" maxlength=\"10\"  pattern=\"^[6-9]\\d{9}$\" required>                     <!-- <input type=\"text\" class=\"input\"> -->             </div>  			<div class=\"checkbox-container\"> 				   				  <div class=\"checkbox-text\"><input type=\"checkbox\" class=\"checkbox\" id=\"fcheck\" checked required> I confirm that I am a voter of Delhi and wish to register for the Kejriwal Mahila Samaan Yojana, to be implemented after the Delhi elections</div> 				</div>                 <button type=\"button\" id=\"send-otp\" disabled>Send Verification code</button>             </div>',	'53de02ed-9a62-4d75-8eed-39b313e58544',	1),
(305,	43,	42,	17,	'testwebrtc',	1735903387129,	0,	'ola cab is going ...............',	'7501c98f-0b0a-439b-9ff3-38bfd3b10630',	0),
(306,	40,	42,	17,	'testwebrtc',	1735903839686,	0,	'&lt;body&gt;     &lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;!-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;           &lt;!-- Bootstrap JS --&gt;     &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;     &lt;script src=&quot;https://cdn.socket.io/4.5.3/socket.io.min.js&quot;&gt;&lt;/script&gt;      &lt;script&gt;         const user = &lt;%- JSON.stringify(userData || {}) %&gt;;         const user_id= user.id         const ContectUserList = &lt;%- JSON.stringify(ContectUserList || []) %&gt;;         const GroupList = &lt;%- JSON.stringify(GroupList || []) %&gt;;         const campaignData=&lt;%- JSON.stringify(campaignData || {}) %&gt;;         const campaignId=campaignData.id         console.log(&quot;campaignData:&quot;, campaignData);         console.log(&quot;ContectUserList:&quot;, ContectUserList);         console.log(&quot;GroupList:&quot;, GroupList);         console.log(&quot;userData:&quot;, &lt;%- JSON.stringify(userData || {}) %&gt;);          let isFetching = false; // Flag to prevent duplicate fetches          function populateContacts(data, type) {             const contactsList = document.getElementById(&#039;contacts-list&#039;);             contactsList.innerHTML = &#039;&#039;; // Clear current list              if (data.length === 0) {                 contactsList.innerHTML = `&lt;p class=&quot;text-center text-muted mt-3&quot;&gt;No ${type === &#039;group&#039; ? &#039;groups&#039; : &#039;contacts&#039;} found.&lt;/p&gt;`;                 return;             }              data.forEach(contact =&gt; {                 console.log(&quot;this is contact&quot;,contact);                 const listItem = document.createElement(&#039;li&#039;);                 listItem.className = &#039;list-group-item bordered d-flex align-items-center&#039;;                 const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}` || &#039;#000000&#039;;                 const firstLetter = contact.name &amp;&amp; contact.name.trim() ? contact.name[0].toUpperCase() : &#039;?&#039;;                 listItem.innerHTML = `                 &lt;div class=&quot;rounded-circle text-center fs-2 me-3&quot; style=&quot;width: 50px;cursor: pointer; height: 50px; background :${randomColor}&quot; aria-label=&quot;User avatar&quot;&gt; ${firstLetter}&lt;/div&gt;                 &lt;div class=&quot;flex-grow-1&quot;  id=&#039;${contact.id}-${contact.name}&#039;&gt;                         &lt;p class=&quot;mb-0 fw-bold d-flex&quot; style=&quot;cursor: pointer;&quot;&gt;                             ${type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile}                                &lt;span class=&quot;rounded-circle ms-3 bg-success me-3&quot; style=&quot;margin-top: 7px;width: 10px;height: 10px;background: #2ecc27 !important;color:#fff;&quot;&gt;&lt;/span&gt;                         &lt;/p&gt;                         &lt;small class=&quot;text-muted&quot;&gt;                             ${type === &#039;group&#039; ? &#039;Group chat&#039; : &#039;Click to chat&#039;}                         &lt;/small&gt;                     &lt;/div&gt;                     ${contact.unSeenMsg &gt; 0                                      ? `&lt;div class=&quot;d-flex align-items-center justify-content-center rounded-circle unSeenMsg&quot;   id=&quot;msg-${contact.id}&quot;                                              style=&quot;width: 25px; height: 25px;background: #2ecc27 !important; color:#fff;&quot;&gt;                                             ${contact.unSeenMsg}                                     &lt;/div&gt;`                                      : &#039;&#039;}                     &lt;/div&gt;             &lt;/div&gt;                 `;                 listItem.onclick = () =&gt; loadChat(type === &#039;group&#039; ? contact.groupId : contact.id, type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile, type);                 contactsList.appendChild(listItem);                              });         }          function showGroups() {             populateContacts(GroupList, &#039;group&#039;);         }          function showOneToOne() {             populateContacts(ContectUserList, &#039;one-to-one&#039;);         }          function loadChat(receiverId, receiverName, type) {             const chatName = document.getElementById(&#039;chat-name&#039;);             chatName.innerHTML = receiverName;             chatName.dataset.receiverId = receiverId;             const activeElements = document.getElementsByClassName(&#039;active&#039;);                 Array.from(activeElements).forEach(element =&gt; {                     element.classList.remove(&#039;active&#039;);                 });             document.getElementById(`${receiverId}-${receiverName}`).classList.add(&#039;active&#039;);             const element = document.getElementById(`msg-${receiverId}`);                 if (element) {                     console.log(&#039;Hiding element:&#039;, element);                     element.style.display = &#039;none&#039;;                     element.style.setProperty(&#039;display&#039;, &#039;none&#039;, &#039;important&#039;);                     element.style.visibility = &#039;hidden&#039;;                  } else {                     console.warn(`Element with ID msg-${receiverId} does not exist.`);                 }             const chatBox = document.getElementById(&#039;chat-box&#039;);             chatBox.innerHTML = &quot;&lt;p class=&#039;text-center text-muted&#039;&gt;Loading messages...&lt;/p&gt;&quot;;             // document.getElementById(`${receiverId}`).id=`${receiverId} active`             const sendBox = document.getElementById(&#039;send-box&#039;);             sendBox.innerHTML = `&lt;form id=&quot;message-form&quot; class=&quot;d-flex&quot; onsubmit=&quot;sendMessage(event, &#039;${type}&#039;)&quot;&gt;                             &lt;input id=&quot;message-input&quot; type=&quot;text&quot; class=&quot;form-control me-2&quot; placeholder=&quot;Type a message...&quot; autocomplete=&quot;off&quot; required&gt;                             &lt;input id=&quot;campaignId&quot; type=&quot;hidden&quot; value=&quot;&lt;%= campaignData.id %&gt;&quot; &gt;                             &lt;input id=&quot;campaignName&quot; type=&quot;hidden&quot; value=&quot;&lt;%=campaignData.name%&gt;&quot; &gt;                             &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Send&lt;/button&gt;                         &lt;/form&gt;`;              const pageSize = 12;             let currentPage = 1;             let totalMessages = 0;              chatBox.innerHTML =`&lt;p class=&#039;text-center text-muted&#039;&gt;Old Chat&lt;/p&gt; &lt;input id=&quot;message-senderId&quot; type=&quot;hidden&quot; value=${receiverId} &gt;`             fetchMessages(receiverId, campaignId,type,currentPage, pageSize, false);             chatBox.onscroll = () =&gt; {                 console.log(chatBox.scrollTop &lt;= 10 , !isFetching , totalMessages , currentPage * pageSize);                 if (chatBox.scrollTop &lt;= 10 &amp;&amp; !isFetching &amp;&amp; totalMessages &gt; currentPage * pageSize) {                     isFetching = true;                     currentPage++;                     fetchMessages(receiverId, campaignId,type, currentPage, pageSize, true);                 }             };              function fetchMessages(receiverId, campaignId,type, page, pageSize, prepend) {                 console.log(&quot;campaign id&quot;,campaignId);                 socket.emit(&#039;loadChatHistory&#039;, { receiverId, campaignId ,page, pageSize, type }, (acknowledgment) =&gt; {                     const chatBox = document.getElementById(&#039;chat-box&#039;);                                          // Remove the &quot;Loading messages...&quot; message once data is fetched                     // chatBox.innerHTML = &#039;&#039;;                       if (acknowledgment.statusCode === 200) {                         const data = acknowledgment.data;                         totalMessages = data.totalMessages;                         displayMessages(data.messages, prepend);                     } else {                         console.error(&#039;Error:&#039;, acknowledgment.error);                     }                     isFetching = false;                 });             }          }          function displayMessages(messages, prepend = false) {             const chatBox = document.getElementById(&#039;chat-box&#039;);             const fragment = document.createDocumentFragment(); // Corrected method name              messages.forEach(message =&gt; {                 const messageElement = document.createElement(&#039;div&#039;);                 console.log(&quot;msg&quot;, message.senderId, user_id);                 messageElement.classList.add(message.senderId == user_id ? &#039;sent-message&#039; : &#039;received-message&#039;);                 messageElement.innerHTML = ` &lt;div class=&quot;message-box&quot;&gt;${message.msgText}&lt;/div&gt;`;                 fragment.appendChild(messageElement);             });              if (prepend) {                 chatBox.insertBefore(fragment, chatBox.firstChild);             } else {                 chatBox.appendChild(fragment);             }              chatBox.scrollTop = chatBox.scrollHeight;         }                   document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // const socket = io(&#039;/&#039;, { path: &#039;/v1/chat/socket.io&#039; });             showOneToOne();         });            &lt;/script&gt;     &lt;script&gt;         // Inject token passed from the backend (EJS rendering)         const token = &quot;&lt;%= token %&gt;&quot;; // Token from the server         // Declare socket globally         let socket;              // Initialize socket on page load         document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // Initialize Socket.IO connection             socket = io(&#039;/&#039;, {                 path: &#039;/v1/chat/socket.io&#039;, // Ensure this matches the server-side path                 query: { token } // Pass the token as a query parameter             });                  // Socket connection listeners             socket.on(&#039;connect&#039;, () =&gt; {                 console.log(&#039;Connected to the server&#039;);                 userConnected();             });                  socket.on(&#039;disconnect&#039;, () =&gt; {                 console.log(&#039;Disconnected from the server&#039;);             });                  // Listen for the &#039;receiveMsg&#039; event             socket.on(&#039;receiveMsg&#039;, (data) =&gt; {                 console.log(&#039;Received message:&#039;, data);                 data=data.data                 let timestamp=Number(data.timestamp)                 // Get the chat box element where you display messages                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const chatBoxSenderId = document.getElementById(&#039;message-senderId&#039;);                 let senderId                 if (chatBoxSenderId) {                      senderId = chatBoxSenderId.value || null;                 } else {                     console.warn(&#039;Element with ID &quot;message-senderId&quot; not found.&#039;);                      senderId = null;                 }                 console.log(&#039;check msg recived data chatBoxSenderId:&#039;,chatBoxSenderId,&quot;  msg send by:&quot;,data.senderId);                 // Dynamically update the chat with the new message                 if (senderId==data.senderId) {                     console.log(&quot;hello&quot;);                     msgReceived(data);                     chatBox.innerHTML += `                         &lt;div class=&quot;received-message&quot;&gt;                             &lt;div class=&quot;message-box&quot; id=&quot;messageBox-${data.id}&quot;&gt;&lt;/div&gt;                             &lt;!---&lt;div class=&quot;sender-info&quot;&gt;Sent by: ${data.senderId} at ${new Date(timestamp).toLocaleString()}&lt;/div&gt; ---&gt;                         &lt;/div&gt;                     `;                     // typeMessage(data.msgText);                     showTypingEffect(`messageBox-${data.id}`, data.msgText);                 }else{                     sendNotification(data);                 }                                  // Scroll to the bottom of the chat box                 chatBox.scrollTop = chatBox.scrollHeight;             });                  socket.on(&#039;sendNotification&#039;,(data)=&gt;{                 console.log(&quot;listing sendNotification data:&quot;,data);             })             socket.on(&#039;newMemberOnline&#039;, (data) =&gt; {             console.log(&quot;Listening to newMemberOnline data:&quot;, data);              // Emit fetchOnlineUser event to server             socket.emit(&#039;fetchOnlineUser&#039;, { data, campaignData }, (ack) =&gt; {                 if (ack.statusCode === 200) {                     console.log(&#039;fetchOnlineUser response&#039;, ack.data);                      // Get the currently active element(s) to reapply later                     const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                      // Populate contacts                     populateContacts(ack.data, &#039;one-to-one&#039;);                      // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                     console.error(&quot;Error in fetchOnlineUser:&quot;, ack.error || &quot;Unknown error&quot;);                 }             });         });               // Show One-to-One Chats by default             showOneToOne();         });         function msgReceived(data){             console.log(&quot;eter in msgReceived &amp; data is:&quot;, data);             socket.emit(&#039;msgReceived&#039;,{data},(ack)=&gt;{                 if (ack.statusCode===200) {                         console.log(&#039;msgReceived responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in msgReceived&quot;, ack.error);                         }             });          }         // if user is connect to socket          function userConnected() {             console.log(&#039;campaignData coneccting user&#039;,campaignData);             socket.emit(&#039;newUserConnected&#039;,{campaignData},(ack)=&gt;{                 console.log(&quot;newUserConnected&quot;,ack);                     if (ack.statusCode===200) {                         console.log(&#039;newUserConnected responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in newUserConnected&quot;, ack.error);                         }                 })         }         // Send a message function (unchanged)         function sendMessage(event, type) {             event.preventDefault();             const messageInput = document.getElementById(&#039;message-input&#039;);             const message = messageInput.value.trim();             if (message) {                 const msgText = escapeHtml(message);                 const receiverId = document.getElementById(&#039;chat-name&#039;).dataset.receiverId;                 const receiverName = document.getElementById(&#039;chat-name&#039;).innerHTML;                 const campaignId= document.getElementById(&#039;campaignId&#039;).value;                 const campaignName= document.getElementById(&#039;campaignName&#039;).value;                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const timestamp = Date.now().toString();                 const localMessageId = generateUUID();                 socket.emit(&#039;sendMessage&#039;, { receiverId, receiverName, campaignId,campaignName,type, msgText, localMessageId, timestamp }, (ack) =&gt; {                     if (ack.statusCode === 200) {                         // let msg=escapeHtml(message)                         chatBox.innerHTML += `                             &lt;div class=&quot;sent-message&quot;&gt;                                 &lt;div class=&quot;message-box&quot;&gt;${msg}&lt;/div&gt;                             &lt;/div&gt;                         `;                         messageInput.value = &#039;&#039;; // Clear the input                         chatBox.scrollTop = chatBox.scrollHeight; // Scroll to bottom                     } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }                 });             }         }          // send notification          function sendNotification(msg){             console.log(&#039;enter in sendNotification &#039;,msg);             socket.emit(&#039;sendNotification&#039;,{msg},(ack)=&gt;{                 if (ack.statusCode===200) {                     console.log(&#039;notification responce&#039;,ack.data);                      // Get the currently active element(s) to reapply later                      const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                     populateContacts(ack.data,&#039;one-to-one&#039;);                     // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }             })         }              // Function to generate unique UUID for message         function generateUUID() {             return &#039;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#039;.replace(/[xy]/g, function(c) {                 var r = Math.random() * 16 | 0,                     v = c === &#039;x&#039; ? r : (r &amp; 0x3 | 0x8);                 return v.toString(16);             });         }     &lt;/script&gt;     &lt;script&gt;        function showTypingEffect(elementId, msgText, speed = 100) {                 let index = 0;                 const element = document.getElementById(elementId);                 element.textContent += msgText                 // function typeCharacter() {                 //     if (index &lt; msgText.length) {                 //         element.textContent += msgText.charAt(index);                 //         index++;                 //         setTimeout(typeCharacter, speed); // call itself to simulate typing                 //     }                 // }                  typeCharacter();             }              function escapeHtml(unsafe) {                     return unsafe                         .replace(/&amp;/g, &quot;&amp;amp;&quot;)                         .replace(/&lt;/g, &quot;&amp;lt;&quot;)                         .replace(/&gt;/g, &quot;&amp;gt;&quot;)                         .replace(/&quot;/g, &quot;&amp;quot;&quot;)                         .replace(/&#039;/g, &quot;&amp;#039;&quot;);                 }     &lt;/script&gt; &lt;/body&gt;',	'5cab5f0e-97c9-433a-8585-a14b5ed471a0',	1),
(307,	40,	42,	17,	'testwebrtc',	1735903841303,	0,	'&lt;body&gt;     &lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;!-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;           &lt;!-- Bootstrap JS --&gt;     &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;     &lt;script src=&quot;https://cdn.socket.io/4.5.3/socket.io.min.js&quot;&gt;&lt;/script&gt;      &lt;script&gt;         const user = &lt;%- JSON.stringify(userData || {}) %&gt;;         const user_id= user.id         const ContectUserList = &lt;%- JSON.stringify(ContectUserList || []) %&gt;;         const GroupList = &lt;%- JSON.stringify(GroupList || []) %&gt;;         const campaignData=&lt;%- JSON.stringify(campaignData || {}) %&gt;;         const campaignId=campaignData.id         console.log(&quot;campaignData:&quot;, campaignData);         console.log(&quot;ContectUserList:&quot;, ContectUserList);         console.log(&quot;GroupList:&quot;, GroupList);         console.log(&quot;userData:&quot;, &lt;%- JSON.stringify(userData || {}) %&gt;);          let isFetching = false; // Flag to prevent duplicate fetches          function populateContacts(data, type) {             const contactsList = document.getElementById(&#039;contacts-list&#039;);             contactsList.innerHTML = &#039;&#039;; // Clear current list              if (data.length === 0) {                 contactsList.innerHTML = `&lt;p class=&quot;text-center text-muted mt-3&quot;&gt;No ${type === &#039;group&#039; ? &#039;groups&#039; : &#039;contacts&#039;} found.&lt;/p&gt;`;                 return;             }              data.forEach(contact =&gt; {                 console.log(&quot;this is contact&quot;,contact);                 const listItem = document.createElement(&#039;li&#039;);                 listItem.className = &#039;list-group-item bordered d-flex align-items-center&#039;;                 const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}` || &#039;#000000&#039;;                 const firstLetter = contact.name &amp;&amp; contact.name.trim() ? contact.name[0].toUpperCase() : &#039;?&#039;;                 listItem.innerHTML = `                 &lt;div class=&quot;rounded-circle text-center fs-2 me-3&quot; style=&quot;width: 50px;cursor: pointer; height: 50px; background :${randomColor}&quot; aria-label=&quot;User avatar&quot;&gt; ${firstLetter}&lt;/div&gt;                 &lt;div class=&quot;flex-grow-1&quot;  id=&#039;${contact.id}-${contact.name}&#039;&gt;                         &lt;p class=&quot;mb-0 fw-bold d-flex&quot; style=&quot;cursor: pointer;&quot;&gt;                             ${type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile}                                &lt;span class=&quot;rounded-circle ms-3 bg-success me-3&quot; style=&quot;margin-top: 7px;width: 10px;height: 10px;background: #2ecc27 !important;color:#fff;&quot;&gt;&lt;/span&gt;                         &lt;/p&gt;                         &lt;small class=&quot;text-muted&quot;&gt;                             ${type === &#039;group&#039; ? &#039;Group chat&#039; : &#039;Click to chat&#039;}                         &lt;/small&gt;                     &lt;/div&gt;                     ${contact.unSeenMsg &gt; 0                                      ? `&lt;div class=&quot;d-flex align-items-center justify-content-center rounded-circle unSeenMsg&quot;   id=&quot;msg-${contact.id}&quot;                                              style=&quot;width: 25px; height: 25px;background: #2ecc27 !important; color:#fff;&quot;&gt;                                             ${contact.unSeenMsg}                                     &lt;/div&gt;`                                      : &#039;&#039;}                     &lt;/div&gt;             &lt;/div&gt;                 `;                 listItem.onclick = () =&gt; loadChat(type === &#039;group&#039; ? contact.groupId : contact.id, type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile, type);                 contactsList.appendChild(listItem);                              });         }          function showGroups() {             populateContacts(GroupList, &#039;group&#039;);         }          function showOneToOne() {             populateContacts(ContectUserList, &#039;one-to-one&#039;);         }          function loadChat(receiverId, receiverName, type) {             const chatName = document.getElementById(&#039;chat-name&#039;);             chatName.innerHTML = receiverName;             chatName.dataset.receiverId = receiverId;             const activeElements = document.getElementsByClassName(&#039;active&#039;);                 Array.from(activeElements).forEach(element =&gt; {                     element.classList.remove(&#039;active&#039;);                 });             document.getElementById(`${receiverId}-${receiverName}`).classList.add(&#039;active&#039;);             const element = document.getElementById(`msg-${receiverId}`);                 if (element) {                     console.log(&#039;Hiding element:&#039;, element);                     element.style.display = &#039;none&#039;;                     element.style.setProperty(&#039;display&#039;, &#039;none&#039;, &#039;important&#039;);                     element.style.visibility = &#039;hidden&#039;;                  } else {                     console.warn(`Element with ID msg-${receiverId} does not exist.`);                 }             const chatBox = document.getElementById(&#039;chat-box&#039;);             chatBox.innerHTML = &quot;&lt;p class=&#039;text-center text-muted&#039;&gt;Loading messages...&lt;/p&gt;&quot;;             // document.getElementById(`${receiverId}`).id=`${receiverId} active`             const sendBox = document.getElementById(&#039;send-box&#039;);             sendBox.innerHTML = `&lt;form id=&quot;message-form&quot; class=&quot;d-flex&quot; onsubmit=&quot;sendMessage(event, &#039;${type}&#039;)&quot;&gt;                             &lt;input id=&quot;message-input&quot; type=&quot;text&quot; class=&quot;form-control me-2&quot; placeholder=&quot;Type a message...&quot; autocomplete=&quot;off&quot; required&gt;                             &lt;input id=&quot;campaignId&quot; type=&quot;hidden&quot; value=&quot;&lt;%= campaignData.id %&gt;&quot; &gt;                             &lt;input id=&quot;campaignName&quot; type=&quot;hidden&quot; value=&quot;&lt;%=campaignData.name%&gt;&quot; &gt;                             &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Send&lt;/button&gt;                         &lt;/form&gt;`;              const pageSize = 12;             let currentPage = 1;             let totalMessages = 0;              chatBox.innerHTML =`&lt;p class=&#039;text-center text-muted&#039;&gt;Old Chat&lt;/p&gt; &lt;input id=&quot;message-senderId&quot; type=&quot;hidden&quot; value=${receiverId} &gt;`             fetchMessages(receiverId, campaignId,type,currentPage, pageSize, false);             chatBox.onscroll = () =&gt; {                 console.log(chatBox.scrollTop &lt;= 10 , !isFetching , totalMessages , currentPage * pageSize);                 if (chatBox.scrollTop &lt;= 10 &amp;&amp; !isFetching &amp;&amp; totalMessages &gt; currentPage * pageSize) {                     isFetching = true;                     currentPage++;                     fetchMessages(receiverId, campaignId,type, currentPage, pageSize, true);                 }             };              function fetchMessages(receiverId, campaignId,type, page, pageSize, prepend) {                 console.log(&quot;campaign id&quot;,campaignId);                 socket.emit(&#039;loadChatHistory&#039;, { receiverId, campaignId ,page, pageSize, type }, (acknowledgment) =&gt; {                     const chatBox = document.getElementById(&#039;chat-box&#039;);                                          // Remove the &quot;Loading messages...&quot; message once data is fetched                     // chatBox.innerHTML = &#039;&#039;;                       if (acknowledgment.statusCode === 200) {                         const data = acknowledgment.data;                         totalMessages = data.totalMessages;                         displayMessages(data.messages, prepend);                     } else {                         console.error(&#039;Error:&#039;, acknowledgment.error);                     }                     isFetching = false;                 });             }          }          function displayMessages(messages, prepend = false) {             const chatBox = document.getElementById(&#039;chat-box&#039;);             const fragment = document.createDocumentFragment(); // Corrected method name              messages.forEach(message =&gt; {                 const messageElement = document.createElement(&#039;div&#039;);                 console.log(&quot;msg&quot;, message.senderId, user_id);                 messageElement.classList.add(message.senderId == user_id ? &#039;sent-message&#039; : &#039;received-message&#039;);                 messageElement.innerHTML = ` &lt;div class=&quot;message-box&quot;&gt;${message.msgText}&lt;/div&gt;`;                 fragment.appendChild(messageElement);             });              if (prepend) {                 chatBox.insertBefore(fragment, chatBox.firstChild);             } else {                 chatBox.appendChild(fragment);             }              chatBox.scrollTop = chatBox.scrollHeight;         }                   document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // const socket = io(&#039;/&#039;, { path: &#039;/v1/chat/socket.io&#039; });             showOneToOne();         });            &lt;/script&gt;     &lt;script&gt;         // Inject token passed from the backend (EJS rendering)         const token = &quot;&lt;%= token %&gt;&quot;; // Token from the server         // Declare socket globally         let socket;              // Initialize socket on page load         document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // Initialize Socket.IO connection             socket = io(&#039;/&#039;, {                 path: &#039;/v1/chat/socket.io&#039;, // Ensure this matches the server-side path                 query: { token } // Pass the token as a query parameter             });                  // Socket connection listeners             socket.on(&#039;connect&#039;, () =&gt; {                 console.log(&#039;Connected to the server&#039;);                 userConnected();             });                  socket.on(&#039;disconnect&#039;, () =&gt; {                 console.log(&#039;Disconnected from the server&#039;);             });                  // Listen for the &#039;receiveMsg&#039; event             socket.on(&#039;receiveMsg&#039;, (data) =&gt; {                 console.log(&#039;Received message:&#039;, data);                 data=data.data                 let timestamp=Number(data.timestamp)                 // Get the chat box element where you display messages                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const chatBoxSenderId = document.getElementById(&#039;message-senderId&#039;);                 let senderId                 if (chatBoxSenderId) {                      senderId = chatBoxSenderId.value || null;                 } else {                     console.warn(&#039;Element with ID &quot;message-senderId&quot; not found.&#039;);                      senderId = null;                 }                 console.log(&#039;check msg recived data chatBoxSenderId:&#039;,chatBoxSenderId,&quot;  msg send by:&quot;,data.senderId);                 // Dynamically update the chat with the new message                 if (senderId==data.senderId) {                     console.log(&quot;hello&quot;);                     msgReceived(data);                     chatBox.innerHTML += `                         &lt;div class=&quot;received-message&quot;&gt;                             &lt;div class=&quot;message-box&quot; id=&quot;messageBox-${data.id}&quot;&gt;&lt;/div&gt;                             &lt;!---&lt;div class=&quot;sender-info&quot;&gt;Sent by: ${data.senderId} at ${new Date(timestamp).toLocaleString()}&lt;/div&gt; ---&gt;                         &lt;/div&gt;                     `;                     // typeMessage(data.msgText);                     showTypingEffect(`messageBox-${data.id}`, data.msgText);                 }else{                     sendNotification(data);                 }                                  // Scroll to the bottom of the chat box                 chatBox.scrollTop = chatBox.scrollHeight;             });                  socket.on(&#039;sendNotification&#039;,(data)=&gt;{                 console.log(&quot;listing sendNotification data:&quot;,data);             })             socket.on(&#039;newMemberOnline&#039;, (data) =&gt; {             console.log(&quot;Listening to newMemberOnline data:&quot;, data);              // Emit fetchOnlineUser event to server             socket.emit(&#039;fetchOnlineUser&#039;, { data, campaignData }, (ack) =&gt; {                 if (ack.statusCode === 200) {                     console.log(&#039;fetchOnlineUser response&#039;, ack.data);                      // Get the currently active element(s) to reapply later                     const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                      // Populate contacts                     populateContacts(ack.data, &#039;one-to-one&#039;);                      // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                     console.error(&quot;Error in fetchOnlineUser:&quot;, ack.error || &quot;Unknown error&quot;);                 }             });         });               // Show One-to-One Chats by default             showOneToOne();         });         function msgReceived(data){             console.log(&quot;eter in msgReceived &amp; data is:&quot;, data);             socket.emit(&#039;msgReceived&#039;,{data},(ack)=&gt;{                 if (ack.statusCode===200) {                         console.log(&#039;msgReceived responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in msgReceived&quot;, ack.error);                         }             });          }         // if user is connect to socket          function userConnected() {             console.log(&#039;campaignData coneccting user&#039;,campaignData);             socket.emit(&#039;newUserConnected&#039;,{campaignData},(ack)=&gt;{                 console.log(&quot;newUserConnected&quot;,ack);                     if (ack.statusCode===200) {                         console.log(&#039;newUserConnected responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in newUserConnected&quot;, ack.error);                         }                 })         }         // Send a message function (unchanged)         function sendMessage(event, type) {             event.preventDefault();             const messageInput = document.getElementById(&#039;message-input&#039;);             const message = messageInput.value.trim();             if (message) {                 const msgText = escapeHtml(message);                 const receiverId = document.getElementById(&#039;chat-name&#039;).dataset.receiverId;                 const receiverName = document.getElementById(&#039;chat-name&#039;).innerHTML;                 const campaignId= document.getElementById(&#039;campaignId&#039;).value;                 const campaignName= document.getElementById(&#039;campaignName&#039;).value;                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const timestamp = Date.now().toString();                 const localMessageId = generateUUID();                 socket.emit(&#039;sendMessage&#039;, { receiverId, receiverName, campaignId,campaignName,type, msgText, localMessageId, timestamp }, (ack) =&gt; {                     if (ack.statusCode === 200) {                         // let msg=escapeHtml(message)                         chatBox.innerHTML += `                             &lt;div class=&quot;sent-message&quot;&gt;                                 &lt;div class=&quot;message-box&quot;&gt;${msg}&lt;/div&gt;                             &lt;/div&gt;                         `;                         messageInput.value = &#039;&#039;; // Clear the input                         chatBox.scrollTop = chatBox.scrollHeight; // Scroll to bottom                     } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }                 });             }         }          // send notification          function sendNotification(msg){             console.log(&#039;enter in sendNotification &#039;,msg);             socket.emit(&#039;sendNotification&#039;,{msg},(ack)=&gt;{                 if (ack.statusCode===200) {                     console.log(&#039;notification responce&#039;,ack.data);                      // Get the currently active element(s) to reapply later                      const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                     populateContacts(ack.data,&#039;one-to-one&#039;);                     // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }             })         }              // Function to generate unique UUID for message         function generateUUID() {             return &#039;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#039;.replace(/[xy]/g, function(c) {                 var r = Math.random() * 16 | 0,                     v = c === &#039;x&#039; ? r : (r &amp; 0x3 | 0x8);                 return v.toString(16);             });         }     &lt;/script&gt;     &lt;script&gt;        function showTypingEffect(elementId, msgText, speed = 100) {                 let index = 0;                 const element = document.getElementById(elementId);                 element.textContent += msgText                 // function typeCharacter() {                 //     if (index &lt; msgText.length) {                 //         element.textContent += msgText.charAt(index);                 //         index++;                 //         setTimeout(typeCharacter, speed); // call itself to simulate typing                 //     }                 // }                  typeCharacter();             }              function escapeHtml(unsafe) {                     return unsafe                         .replace(/&amp;/g, &quot;&amp;amp;&quot;)                         .replace(/&lt;/g, &quot;&amp;lt;&quot;)                         .replace(/&gt;/g, &quot;&amp;gt;&quot;)                         .replace(/&quot;/g, &quot;&amp;quot;&quot;)                         .replace(/&#039;/g, &quot;&amp;#039;&quot;);                 }     &lt;/script&gt; &lt;/body&gt;',	'559b272d-53e6-4f38-9219-80af64afa83d',	1),
(308,	40,	42,	17,	'testwebrtc',	1735903849302,	0,	'&lt;body&gt;     &lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;           &lt;!-- Bootstrap JS --&gt;     &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;     &lt;script src=&quot;https://cdn.socket.io/4.5.3/socket.io.min.js&quot;&gt;&lt;/script&gt;      &lt;script&gt;         const user = &lt;%- JSON.stringify(userData || {}) %&gt;;         const user_id= user.id         const ContectUserList = &lt;%- JSON.stringify(ContectUserList || []) %&gt;;         const GroupList = &lt;%- JSON.stringify(GroupList || []) %&gt;;         const campaignData=&lt;%- JSON.stringify(campaignData || {}) %&gt;;         const campaignId=campaignData.id         console.log(&quot;campaignData:&quot;, campaignData);         console.log(&quot;ContectUserList:&quot;, ContectUserList);         console.log(&quot;GroupList:&quot;, GroupList);         console.log(&quot;userData:&quot;, &lt;%- JSON.stringify(userData || {}) %&gt;);          let isFetching = false; // Flag to prevent duplicate fetches          function populateContacts(data, type) {             const contactsList = document.getElementById(&#039;contacts-list&#039;);             contactsList.innerHTML = &#039;&#039;; // Clear current list              if (data.length === 0) {                 contactsList.innerHTML = `&lt;p class=&quot;text-center text-muted mt-3&quot;&gt;No ${type === &#039;group&#039; ? &#039;groups&#039; : &#039;contacts&#039;} found.&lt;/p&gt;`;                 return;             }              data.forEach(contact =&gt; {                 console.log(&quot;this is contact&quot;,contact);                 const listItem = document.createElement(&#039;li&#039;);                 listItem.className = &#039;list-group-item bordered d-flex align-items-center&#039;;                 const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}` || &#039;#000000&#039;;                 const firstLetter = contact.name &amp;&amp; contact.name.trim() ? contact.name[0].toUpperCase() : &#039;?&#039;;                 listItem.innerHTML = `                 &lt;div class=&quot;rounded-circle text-center fs-2 me-3&quot; style=&quot;width: 50px;cursor: pointer; height: 50px; background :${randomColor}&quot; aria-label=&quot;User avatar&quot;&gt; ${firstLetter}&lt;/div&gt;                 &lt;div class=&quot;flex-grow-1&quot;  id=&#039;${contact.id}-${contact.name}&#039;&gt;                         &lt;p class=&quot;mb-0 fw-bold d-flex&quot; style=&quot;cursor: pointer;&quot;&gt;                             ${type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile}                                &lt;span class=&quot;rounded-circle ms-3 bg-success me-3&quot; style=&quot;margin-top: 7px;width: 10px;height: 10px;background: #2ecc27 !important;color:#fff;&quot;&gt;&lt;/span&gt;                         &lt;/p&gt;                         &lt;small class=&quot;text-muted&quot;&gt;                             ${type === &#039;group&#039; ? &#039;Group chat&#039; : &#039;Click to chat&#039;}                         &lt;/small&gt;                     &lt;/div&gt;                     ${contact.unSeenMsg &gt; 0                                      ? `&lt;div class=&quot;d-flex align-items-center justify-content-center rounded-circle unSeenMsg&quot;   id=&quot;msg-${contact.id}&quot;                                              style=&quot;width: 25px; height: 25px;background: #2ecc27 !important; color:#fff;&quot;&gt;                                             ${contact.unSeenMsg}                                     &lt;/div&gt;`                                      : &#039;&#039;}                     &lt;/div&gt;             &lt;/div&gt;                 `;                 listItem.onclick = () =&gt; loadChat(type === &#039;group&#039; ? contact.groupId : contact.id, type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile, type);                 contactsList.appendChild(listItem);                              });         }          function showGroups() {             populateContacts(GroupList, &#039;group&#039;);         }          function showOneToOne() {             populateContacts(ContectUserList, &#039;one-to-one&#039;);         }          function loadChat(receiverId, receiverName, type) {             const chatName = document.getElementById(&#039;chat-name&#039;);             chatName.innerHTML = receiverName;             chatName.dataset.receiverId = receiverId;             const activeElements = document.getElementsByClassName(&#039;active&#039;);                 Array.from(activeElements).forEach(element =&gt; {                     element.classList.remove(&#039;active&#039;);                 });             document.getElementById(`${receiverId}-${receiverName}`).classList.add(&#039;active&#039;);             const element = document.getElementById(`msg-${receiverId}`);                 if (element) {                     console.log(&#039;Hiding element:&#039;, element);                     element.style.display = &#039;none&#039;;                     element.style.setProperty(&#039;display&#039;, &#039;none&#039;, &#039;important&#039;);                     element.style.visibility = &#039;hidden&#039;;                  } else {                     console.warn(`Element with ID msg-${receiverId} does not exist.`);                 }             const chatBox = document.getElementById(&#039;chat-box&#039;);             chatBox.innerHTML = &quot;&lt;p class=&#039;text-center text-muted&#039;&gt;Loading messages...&lt;/p&gt;&quot;;             // document.getElementById(`${receiverId}`).id=`${receiverId} active`             const sendBox = document.getElementById(&#039;send-box&#039;);             sendBox.innerHTML = `&lt;form id=&quot;message-form&quot; class=&quot;d-flex&quot; onsubmit=&quot;sendMessage(event, &#039;${type}&#039;)&quot;&gt;                             &lt;input id=&quot;message-input&quot; type=&quot;text&quot; class=&quot;form-control me-2&quot; placeholder=&quot;Type a message...&quot; autocomplete=&quot;off&quot; required&gt;                             &lt;input id=&quot;campaignId&quot; type=&quot;hidden&quot; value=&quot;&lt;%= campaignData.id %&gt;&quot; &gt;                             &lt;input id=&quot;campaignName&quot; type=&quot;hidden&quot; value=&quot;&lt;%=campaignData.name%&gt;&quot; &gt;                             &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Send&lt;/button&gt;                         &lt;/form&gt;`;              const pageSize = 12;             let currentPage = 1;             let totalMessages = 0;              chatBox.innerHTML =`&lt;p class=&#039;text-center text-muted&#039;&gt;Old Chat&lt;/p&gt; &lt;input id=&quot;message-senderId&quot; type=&quot;hidden&quot; value=${receiverId} &gt;`             fetchMessages(receiverId, campaignId,type,currentPage, pageSize, false);             chatBox.onscroll = () =&gt; {                 console.log(chatBox.scrollTop &lt;= 10 , !isFetching , totalMessages , currentPage * pageSize);                 if (chatBox.scrollTop &lt;= 10 &amp;&amp; !isFetching &amp;&amp; totalMessages &gt; currentPage * pageSize) {                     isFetching = true;                     currentPage++;                     fetchMessages(receiverId, campaignId,type, currentPage, pageSize, true);                 }             };              function fetchMessages(receiverId, campaignId,type, page, pageSize, prepend) {                 console.log(&quot;campaign id&quot;,campaignId);                 socket.emit(&#039;loadChatHistory&#039;, { receiverId, campaignId ,page, pageSize, type }, (acknowledgment) =&gt; {                     const chatBox = document.getElementById(&#039;chat-box&#039;);                                          // Remove the &quot;Loading messages...&quot; message once data is fetched                     // chatBox.innerHTML = &#039;&#039;;                       if (acknowledgment.statusCode === 200) {                         const data = acknowledgment.data;                         totalMessages = data.totalMessages;                         displayMessages(data.messages, prepend);                     } else {                         console.error(&#039;Error:&#039;, acknowledgment.error);                     }                     isFetching = false;                 });             }          }          function displayMessages(messages, prepend = false) {             const chatBox = document.getElementById(&#039;chat-box&#039;);             const fragment = document.createDocumentFragment(); // Corrected method name              messages.forEach(message =&gt; {                 const messageElement = document.createElement(&#039;div&#039;);                 console.log(&quot;msg&quot;, message.senderId, user_id);                 messageElement.classList.add(message.senderId == user_id ? &#039;sent-message&#039; : &#039;received-message&#039;);                 messageElement.innerHTML = ` &lt;div class=&quot;message-box&quot;&gt;${message.msgText}&lt;/div&gt;`;                 fragment.appendChild(messageElement);             });              if (prepend) {                 chatBox.insertBefore(fragment, chatBox.firstChild);             } else {                 chatBox.appendChild(fragment);             }              chatBox.scrollTop = chatBox.scrollHeight;         }                   document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // const socket = io(&#039;/&#039;, { path: &#039;/v1/chat/socket.io&#039; });             showOneToOne();         });            &lt;/script&gt;     &lt;script&gt;         // Inject token passed from the backend (EJS rendering)         const token = &quot;&lt;%= token %&gt;&quot;; // Token from the server         // Declare socket globally         let socket;              // Initialize socket on page load         document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; {             // Initialize Socket.IO connection             socket = io(&#039;/&#039;, {                 path: &#039;/v1/chat/socket.io&#039;, // Ensure this matches the server-side path                 query: { token } // Pass the token as a query parameter             });                  // Socket connection listeners             socket.on(&#039;connect&#039;, () =&gt; {                 console.log(&#039;Connected to the server&#039;);                 userConnected();             });                  socket.on(&#039;disconnect&#039;, () =&gt; {                 console.log(&#039;Disconnected from the server&#039;);             });                  // Listen for the &#039;receiveMsg&#039; event             socket.on(&#039;receiveMsg&#039;, (data) =&gt; {                 console.log(&#039;Received message:&#039;, data);                 data=data.data                 let timestamp=Number(data.timestamp)                 // Get the chat box element where you display messages                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const chatBoxSenderId = document.getElementById(&#039;message-senderId&#039;);                 let senderId                 if (chatBoxSenderId) {                      senderId = chatBoxSenderId.value || null;                 } else {                     console.warn(&#039;Element with ID &quot;message-senderId&quot; not found.&#039;);                      senderId = null;                 }                 console.log(&#039;check msg recived data chatBoxSenderId:&#039;,chatBoxSenderId,&quot;  msg send by:&quot;,data.senderId);                 // Dynamically update the chat with the new message                 if (senderId==data.senderId) {                     console.log(&quot;hello&quot;);                     msgReceived(data);                     chatBox.innerHTML += `                         &lt;div class=&quot;received-message&quot;&gt;                             &lt;div class=&quot;message-box&quot; id=&quot;messageBox-${data.id}&quot;&gt;&lt;/div&gt;                             &lt;!---&lt;div class=&quot;sender-info&quot;&gt;Sent by: ${data.senderId} at ${new Date(timestamp).toLocaleString()}&lt;/div&gt; ---&gt;                         &lt;/div&gt;                     `;                     // typeMessage(data.msgText);                     showTypingEffect(`messageBox-${data.id}`, data.msgText);                 }else{                     sendNotification(data);                 }                                  // Scroll to the bottom of the chat box                 chatBox.scrollTop = chatBox.scrollHeight;             });                  socket.on(&#039;sendNotification&#039;,(data)=&gt;{                 console.log(&quot;listing sendNotification data:&quot;,data);             })             socket.on(&#039;newMemberOnline&#039;, (data) =&gt; {             console.log(&quot;Listening to newMemberOnline data:&quot;, data);              // Emit fetchOnlineUser event to server             socket.emit(&#039;fetchOnlineUser&#039;, { data, campaignData }, (ack) =&gt; {                 if (ack.statusCode === 200) {                     console.log(&#039;fetchOnlineUser response&#039;, ack.data);                      // Get the currently active element(s) to reapply later                     const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                      // Populate contacts                     populateContacts(ack.data, &#039;one-to-one&#039;);                      // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                     console.error(&quot;Error in fetchOnlineUser:&quot;, ack.error || &quot;Unknown error&quot;);                 }             });         });               // Show One-to-One Chats by default             showOneToOne();         });         function msgReceived(data){             console.log(&quot;eter in msgReceived &amp; data is:&quot;, data);             socket.emit(&#039;msgReceived&#039;,{data},(ack)=&gt;{                 if (ack.statusCode===200) {                         console.log(&#039;msgReceived responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in msgReceived&quot;, ack.error);                         }             });          }         // if user is connect to socket          function userConnected() {             console.log(&#039;campaignData coneccting user&#039;,campaignData);             socket.emit(&#039;newUserConnected&#039;,{campaignData},(ack)=&gt;{                 console.log(&quot;newUserConnected&quot;,ack);                     if (ack.statusCode===200) {                         console.log(&#039;newUserConnected responce&#039;,ack.data);                         // populateContacts(ack.data,&#039;one-to-one&#039;)                     } else {                             console.log(&quot;Error in newUserConnected&quot;, ack.error);                         }                 })         }         // Send a message function (unchanged)         function sendMessage(event, type) {             event.preventDefault();             const messageInput = document.getElementById(&#039;message-input&#039;);             const message = messageInput.value.trim();             if (message) {                 const msgText = escapeHtml(message);                 const receiverId = document.getElementById(&#039;chat-name&#039;).dataset.receiverId;                 const receiverName = document.getElementById(&#039;chat-name&#039;).innerHTML;                 const campaignId= document.getElementById(&#039;campaignId&#039;).value;                 const campaignName= document.getElementById(&#039;campaignName&#039;).value;                 const chatBox = document.getElementById(&#039;chat-box&#039;);                 const timestamp = Date.now().toString();                 const localMessageId = generateUUID();                 socket.emit(&#039;sendMessage&#039;, { receiverId, receiverName, campaignId,campaignName,type, msgText, localMessageId, timestamp }, (ack) =&gt; {                     if (ack.statusCode === 200) {                         // let msg=escapeHtml(message)                         chatBox.innerHTML += `                             &lt;div class=&quot;sent-message&quot;&gt;                                 &lt;div class=&quot;message-box&quot;&gt;${msg}&lt;/div&gt;                             &lt;/div&gt;                         `;                         messageInput.value = &#039;&#039;; // Clear the input                         chatBox.scrollTop = chatBox.scrollHeight; // Scroll to bottom                     } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }                 });             }         }          // send notification          function sendNotification(msg){             console.log(&#039;enter in sendNotification &#039;,msg);             socket.emit(&#039;sendNotification&#039;,{msg},(ack)=&gt;{                 if (ack.statusCode===200) {                     console.log(&#039;notification responce&#039;,ack.data);                      // Get the currently active element(s) to reapply later                      const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;));                     const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs                      // Remove &#039;active&#039; class from all elements                     activeElements.forEach((el) =&gt; {                         el.classList.remove(&#039;active&#039;);                     });                     populateContacts(ack.data,&#039;one-to-one&#039;);                     // Reapply the &#039;active&#039; class to the previously active element(s)                     activeElementIds.forEach((id) =&gt; {                         const element = document.getElementById(id);                         if (element) {                             element.classList.add(&#039;active&#039;);                         } else {                             console.warn(`Element with ID &quot;${id}&quot; not found.`);                         }                     });                 } else {                         console.log(&quot;Error in messageSend&quot;, ack.error);                     }             })         }              // Function to generate unique UUID for message         function generateUUID() {             return &#039;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#039;.replace(/[xy]/g, function(c) {                 var r = Math.random() * 16 | 0,                     v = c === &#039;x&#039; ? r : (r &amp; 0x3 | 0x8);                 return v.toString(16);             });         }     &lt;/script&gt;     &lt;script&gt;        function showTypingEffect(elementId, msgText, speed = 100) {                 let index = 0;                 const element = document.getElementById(elementId);                 element.textContent += msgText                 // function typeCharacter() {                 //     if (index &lt; msgText.length) {                 //         element.textContent += msgText.charAt(index);                 //         index++;                 //         setTimeout(typeCharacter, speed); // call itself to simulate typing                 //     }                 // }                  typeCharacter();             }              function escapeHtml(unsafe) {                     return unsafe                         .replace(/&amp;/g, &quot;&amp;amp;&quot;)                         .replace(/&lt;/g, &quot;&amp;lt;&quot;)                         .replace(/&gt;/g, &quot;&amp;gt;&quot;)                         .replace(/&quot;/g, &quot;&amp;quot;&quot;)                         .replace(/&#039;/g, &quot;&amp;#039;&quot;);                 }     &lt;/script&gt; &lt;/body&gt;',	'7e3b3135-6b83-4126-8e67-b9b375f36501',	1),
(309,	40,	42,	17,	'testwebrtc',	1735903882398,	0,	'&lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;!-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;',	'b8c6d024-dd43-489b-81d5-f630634d100b',	1),
(310,	40,	42,	17,	'testwebrtc',	1735903884093,	0,	'&lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;!-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;',	'124d5d72-955c-43b1-8c4d-376f6c3e11f5',	1),
(311,	40,	42,	17,	'testwebrtc',	1735903899347,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'e056ca23-b314-49ca-a487-c3ea0f163ee5',	1),
(312,	40,	42,	17,	'testwebrtc',	1735903958666,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'e4f2989a-0c91-4ed7-9d98-569c66356a1d',	1),
(313,	40,	42,	17,	'testwebrtc',	1735903990587,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'9f39cac2-4eb4-4153-bcbb-a8df272d1d81',	1),
(314,	40,	42,	17,	'testwebrtc',	1735903992051,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'05edead8-73bf-40b7-9cdf-c34054762120',	1),
(315,	40,	42,	17,	'testwebrtc',	1735903992939,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'875312fc-cd2a-410c-b605-1016328a4bbc',	1),
(316,	40,	42,	17,	'testwebrtc',	1735903993139,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'7d8f9221-a372-4cea-9bc5-cba8c451326a',	1),
(317,	40,	42,	17,	'testwebrtc',	1735904610545,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'68ea62fa-28eb-42dd-8190-c8b1b87553c2',	1),
(318,	40,	42,	17,	'testwebrtc',	1735904687640,	0,	'&lt;b&gt;Nitish&lt;/b&gt;',	'519709b8-6ee7-4732-8936-73e759375f90',	1),
(319,	40,	42,	17,	'testwebrtc',	1735904768052,	0,	'type=&quot;text&quot; id=&quot;mobile_number&quot; name=&quot;mobile_number&quot; placeholder=&quot;8080890909&quot; maxlength=&quot;10&quot;  pattern=&quot;^[6-9]\\d{9}$&quot; required&gt;                     &lt;!-- &lt;input type=&quot;text&quot; class=&quot;input&quot;&gt; --&gt;             &lt;/div&gt;  			&lt;div class=&quot;checkbox-container&quot;&gt; 				   				  &lt;div class=&quot;checkbox-text&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;checkbox&quot; id=&quot;fcheck&quot; checked required&gt; I confirm that I am a voter of Delhi and wish to register for the Kejriwal Mahila Samaan Yojana, to be implemented after the Delhi elections&lt;/div&gt; 				&lt;/div&gt;                 &lt;button type=&quot;button&quot; id=&quot;send-otp&quot; disabled&gt;Send Verification code&lt;/button&gt;             &lt;/div&gt;',	'054ba5bd-1007-4609-bc69-eecf4b330b01',	1),
(320,	40,	41,	17,	'testwebrtc',	1736138431203,	0,	'&lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;',	'4e0f302a-c630-4bb8-93f5-6e83399e6518',	1),
(321,	40,	41,	17,	'testwebrtc',	1736138463535,	0,	'😀',	'628af8dc-83f8-49f3-b505-006dfac3a91a',	1),
(322,	41,	40,	17,	'testwebrtc',	1736138679078,	0,	'😀',	'b7647ef5-f1d8-4955-9442-1bf874eace13',	1),
(323,	41,	40,	17,	'testwebrtc',	1736138683142,	0,	'😀😀😀😀😀😀😀😀',	'43f14930-2821-4cf5-849e-2ba16e18bd72',	1),
(324,	40,	41,	17,	'testwebrtc',	1736138731758,	0,	'हिन्दी में अनुच्छेद लेखन का मतलब है, किसी विषय पर थोड़े से शब्दों में अपने विचारों को व्यक्त करना. अनुच्छेद लेखन एक अहम लेखन रूप है, जिसके ज़रिए विचारों को स्पष्ट और व्यवस्थित तरीके से पेश किया जा सकता है. अनुच्छेद लेखन की कुछ खास बातेंः  अनुच्छेद में किसी एक विचार, भाव, या तथ्य को एक ही जगह पर बताया जाता है. अनुच्छेद में अप्रासंगिक बातें नहीं होतीं. अनुच्छेद के सभी वाक्य एक-दूसरे से जुड़े होते हैं. अनुच्छेद की भाषा सरल और स्पष्ट होनी चाहिए. अनुच्छेद की लंबाई विषय पर निर्भर करती है. अनुच्छेद में विचारों को इस तरह से रखा जाता है कि उनका आरंभ, मध्य, और अंत आसानी से समझा जा सके.',	'a3bfe5c5-82d7-4921-ad43-95c29562dd41',	1),
(325,	41,	40,	17,	'testwebrtc',	1736138754382,	0,	'हिन्दी में अनुच्छेद लेखन का मतलब है, किसी विषय पर थोड़े से शब्दों में अपने विचारों को व्यक्त करना. अनुच्छेद लेखन एक अहम लेखन रूप है, जिसके ज़रिए विचारों को स्पष्ट और व्यवस्थित तरीके से पेश किया जा सकता है. अनुच्छेद लेखन की कुछ खास बातेंः  अनुच्छेद में किसी एक विचार, भाव, या तथ्य को एक ही जगह पर बताया जाता है. अनुच्छेद में अप्रासंगिक बातें नहीं होतीं. अनुच्छेद के सभी वाक्य एक-दूसरे से जुड़े होते हैं. अनुच्छेद की भाषा सरल और स्पष्ट होनी चाहिए. अनुच्छेद की लंबाई विषय पर निर्भर करती है. अनुच्छेद में विचारों को इस तरह से रखा जाता है कि उनका आरंभ, मध्य, और अंत आसानी से समझा जा सके.@$?&gt;&lt;:&quot;:{}|+_)(*&amp;^%$#@!~',	'8f32829c-9d7b-4323-8c17-2138e42e5c18',	1),
(326,	41,	40,	17,	'testwebrtc',	1736138831705,	0,	'&lt;div class=&quot;container-fluid &quot; &gt;         &lt;div class=&quot;row&quot; &gt;             &lt;!-- Contacts Sidebar --&gt;             &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt;                     &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt;                     &lt;div&gt;                         &lt;!-- Optional Buttons for Switching Views --&gt;                         &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt;                         &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt;                     &lt;/div&gt;                 &lt;/div&gt;                 &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt;                     &lt;!-- Contacts will be dynamically populated here --&gt;                 &lt;/ul&gt;             &lt;/div&gt;                  &lt;!-- Chat Window --&gt;             &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt;                 &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt;                     &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt;                 &lt;/div&gt;                 &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt;                     &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt;                 &lt;/div&gt;                 &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom  border-top p-3&quot;&gt;                                     &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;',	'e0273c3a-ef44-4d0d-8f68-10022cfd28ec',	1),
(327,	40,	41,	17,	'testwebrtc',	1736139381947,	0,	'hello',	'ae93c489-6c08-4387-a1de-a943163454cd',	1),
(328,	40,	42,	17,	'testwebrtc',	1736139880614,	0,	'&lt;body&gt; &lt;div class=&quot;container-fluid &quot; &gt; &lt;div class=&quot;row&quot; &gt; &lt;-- Contacts Sidebar --&gt; &lt;div class=&quot;col-lg-4 col-md-4 col-sm-12 border-end bg-purple-300 d-flex flex-column p-0&quot;&gt; &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex justify-content-between align-items-center&quot;&gt; &lt;h5 class=&quot;mb-0&quot;&gt;Contacts&lt;/h5&gt; &lt;div&gt; &lt;!-- Optional Buttons for Switching Views --&gt; &lt;!-- &lt;button id=&quot;btn-groups&quot; class=&quot;btn btn-light btn-sm me-2&quot; onclick=&quot;showGroups()&quot;&gt;Groups&lt;/button&gt; &lt;button id=&quot;btn-onetoone&quot; class=&quot;btn btn-light btn-sm&quot; onclick=&quot;showOneToOne()&quot;&gt;One-to-One&lt;/button&gt; --&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul id=&quot;contacts-list&quot; class=&quot;list-group list-group-flush overflow-auto&quot; style=&quot;max-height: calc(100vh - 56px);&quot;&gt; &lt;!-- Contacts will be dynamically populated here --&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- Chat Window --&gt; &lt;div class=&quot;col-lg-8 col-md-8 col-sm-12 d-flex flex-column p-0 vh-100&quot;&gt; &lt;div class=&quot;bg-purple-400 text-white py-3 px-4 d-flex align-items-center&quot;&gt; &lt;h5 id=&quot;chat-name&quot; class=&quot;mb-0&quot;&gt;Select a contact&lt;/h5&gt; &lt;/div&gt; &lt;div id=&quot;chat-box&quot; class=&quot;flex-grow-1 overflow-auto p-3 d-flex flex-column&quot;&gt; &lt;p class=&quot;text-center text-muted&quot;&gt;Please select a contact to start chatting.&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;send-box&quot; class=&quot;fixed-bottom border-top p-3&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Bootstrap JS --&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.socket.io/4.5.3/socket.io.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const user = &lt;%- JSON.stringify(userData || {}) %&gt;; const user_id= user.id const ContectUserList = &lt;%- JSON.stringify(ContectUserList || []) %&gt;; const GroupList = &lt;%- JSON.stringify(GroupList || []) %&gt;; const campaignData=&lt;%- JSON.stringify(campaignData || {}) %&gt;; const campaignId=campaignData.id console.log(&quot;campaignData:&quot;, campaignData); console.log(&quot;ContectUserList:&quot;, ContectUserList); console.log(&quot;GroupList:&quot;, GroupList); console.log(&quot;userData:&quot;, &lt;%- JSON.stringify(userData || {}) %&gt;); let isFetching = false; // Flag to prevent duplicate fetches function populateContacts(data, type) { const contactsList = document.getElementById(&#039;contacts-list&#039;); contactsList.innerHTML = &#039;&#039;; // Clear current list if (data.length === 0) { contactsList.innerHTML = `&lt;p class=&quot;text-center text-muted mt-3&quot;&gt;No ${type === &#039;group&#039; ? &#039;groups&#039; : &#039;contacts&#039;} found.&lt;/p&gt;`; return; } data.forEach(contact =&gt; { console.log(&quot;this is contact&quot;,contact); const listItem = document.createElement(&#039;li&#039;); listItem.className = &#039;list-group-item bordered d-flex align-items-center&#039;; const randomColor = `#${Math.floor(Math.random() * 16777215).toString(16)}` || &#039;#000000&#039;; const firstLetter = contact.name &amp;&amp; contact.name.trim() ? contact.name[0].toUpperCase() : &#039;?&#039;; listItem.innerHTML = ` &lt;div class=&quot;rounded-circle text-center fs-2 me-3&quot; style=&quot;width: 50px;cursor: pointer; height: 50px; background :${randomColor}&quot; aria-label=&quot;User avatar&quot;&gt; ${firstLetter}&lt;/div&gt; &lt;div class=&quot;flex-grow-1&quot; id=&#039;${contact.id}-${contact.name}&#039;&gt; &lt;p class=&quot;mb-0 fw-bold d-flex&quot; style=&quot;cursor: pointer;&quot;&gt; ${type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile} &lt;span class=&quot;rounded-circle ms-3 bg-success me-3&quot; style=&quot;margin-top: 7px;width: 10px;height: 10px;background: #2ecc27 !important;color:#fff;&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;small class=&quot;text-muted&quot;&gt; ${type === &#039;group&#039; ? &#039;Group chat&#039; : &#039;Click to chat&#039;} &lt;/small&gt; &lt;/div&gt; ${contact.unSeenMsg &gt; 0 ? `&lt;div class=&quot;d-flex align-items-center justify-content-center rounded-circle unSeenMsg&quot; id=&quot;msg-${contact.id}&quot; style=&quot;width: 25px; height: 25px;background: #2ecc27 !important; color:#fff;&quot;&gt; ${contact.unSeenMsg} &lt;/div&gt;` : &#039;&#039;} &lt;/div&gt; &lt;/div&gt; `; listItem.onclick = () =&gt; loadChat(type === &#039;group&#039; ? contact.groupId : contact.id, type === &#039;group&#039; ? contact.groupName : contact.name || contact.mobile, type); contactsList.appendChild(listItem); }); } function showGroups() { populateContacts(GroupList, &#039;group&#039;); } function showOneToOne() { populateContacts(ContectUserList, &#039;one-to-one&#039;); } function loadChat(receiverId, receiverName, type) { const chatName = document.getElementById(&#039;chat-name&#039;); chatName.innerHTML = receiverName; chatName.dataset.receiverId = receiverId; const activeElements = document.getElementsByClassName(&#039;active&#039;); Array.from(activeElements).forEach(element =&gt; { element.classList.remove(&#039;active&#039;); }); document.getElementById(`${receiverId}-${receiverName}`).classList.add(&#039;active&#039;); const element = document.getElementById(`msg-${receiverId}`); if (element) { console.log(&#039;Hiding element:&#039;, element); element.style.display = &#039;none&#039;; element.style.setProperty(&#039;display&#039;, &#039;none&#039;, &#039;important&#039;); element.style.visibility = &#039;hidden&#039;; } else { console.warn(`Element with ID msg-${receiverId} does not exist.`); } const chatBox = document.getElementById(&#039;chat-box&#039;); chatBox.innerHTML = &quot;&lt;p class=&#039;text-center text-muted&#039;&gt;Loading messages...&lt;/p&gt;&quot;; // document.getElementById(`${receiverId}`).id=`${receiverId} active` const sendBox = document.getElementById(&#039;send-box&#039;); sendBox.innerHTML = `&lt;form id=&quot;message-form&quot; class=&quot;d-flex&quot; onsubmit=&quot;sendMessage(event, &#039;${type}&#039;)&quot;&gt; &lt;input id=&quot;message-input&quot; type=&quot;text&quot; class=&quot;form-control me-2&quot; placeholder=&quot;Type a message...&quot; autocomplete=&quot;off&quot; required&gt; &lt;input id=&quot;campaignId&quot; type=&quot;hidden&quot; value=&quot;&lt;%= campaignData.id %&gt;&quot; &gt; &lt;input id=&quot;campaignName&quot; type=&quot;hidden&quot; value=&quot;&lt;%=campaignData.name%&gt;&quot; &gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Send&lt;/button&gt; &lt;/form&gt;`; const pageSize = 12; let currentPage = 1; let totalMessages = 0; chatBox.innerHTML =`&lt;p class=&#039;text-center text-muted&#039;&gt;Old Chat&lt;/p&gt; &lt;input id=&quot;message-senderId&quot; type=&quot;hidden&quot; value=${receiverId} &gt;` fetchMessages(receiverId, campaignId,type,currentPage, pageSize, false); chatBox.onscroll = () =&gt; { console.log(chatBox.scrollTop &lt;= 10 , !isFetching , totalMessages , currentPage * pageSize); if (chatBox.scrollTop &lt;= 10 &amp;&amp; !isFetching &amp;&amp; totalMessages &gt; currentPage * pageSize) { isFetching = true; currentPage++; fetchMessages(receiverId, campaignId,type, currentPage, pageSize, true); } }; function fetchMessages(receiverId, campaignId,type, page, pageSize, prepend) { console.log(&quot;campaign id&quot;,campaignId); socket.emit(&#039;loadChatHistory&#039;, { receiverId, campaignId ,page, pageSize, type }, (acknowledgment) =&gt; { const chatBox = document.getElementById(&#039;chat-box&#039;); // Remove the &quot;Loading messages...&quot; message once data is fetched // chatBox.innerHTML = &#039;&#039;; if (acknowledgment.statusCode === 200) { const data = acknowledgment.data; totalMessages = data.totalMessages; displayMessages(data.messages, prepend); } else { console.error(&#039;Error:&#039;, acknowledgment.error); } isFetching = false; }); } } function displayMessages(messages, prepend = false) { const chatBox = document.getElementById(&#039;chat-box&#039;); const fragment = document.createDocumentFragment(); // Corrected method name messages.forEach(message =&gt; { const messageElement = document.createElement(&#039;div&#039;); console.log(&quot;msg&quot;, message.senderId, user_id); messageElement.classList.add(message.senderId == user_id ? &#039;sent-message&#039; : &#039;received-message&#039;); messageElement.innerHTML = ` &lt;div class=&quot;message-box&quot;&gt;${message.msgText}&lt;/div&gt;`; fragment.appendChild(messageElement); }); if (prepend) { chatBox.insertBefore(fragment, chatBox.firstChild); } else { chatBox.appendChild(fragment); } chatBox.scrollTop = chatBox.scrollHeight; } document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; { // const socket = io(&#039;/&#039;, { path: &#039;/v1/chat/socket.io&#039; }); showOneToOne(); }); &lt;/script&gt; &lt;script&gt; // Inject token passed from the backend (EJS rendering) const token = &quot;&lt;%= token %&gt;&quot;; // Token from the server // Declare socket globally let socket; // Initialize socket on page load document.addEventListener(&#039;DOMContentLoaded&#039;, () =&gt; { // Initialize Socket.IO connection socket = io(&#039;/&#039;, { path: &#039;/v1/chat/socket.io&#039;, // Ensure this matches the server-side path query: { token } // Pass the token as a query parameter }); // Socket connection listeners socket.on(&#039;connect&#039;, () =&gt; { console.log(&#039;Connected to the server&#039;); userConnected(); }); socket.on(&#039;disconnect&#039;, () =&gt; { console.log(&#039;Disconnected from the server&#039;); }); // Listen for the &#039;receiveMsg&#039; event socket.on(&#039;receiveMsg&#039;, (data) =&gt; { console.log(&#039;Received message:&#039;, data); data=data.data let timestamp=Number(data.timestamp) // Get the chat box element where you display messages const chatBox = document.getElementById(&#039;chat-box&#039;); const chatBoxSenderId = document.getElementById(&#039;message-senderId&#039;); let senderId if (chatBoxSenderId) { senderId = chatBoxSenderId.value || null; } else { console.warn(&#039;Element with ID &quot;message-senderId&quot; not found.&#039;); senderId = null; } console.log(&#039;check msg recived data chatBoxSenderId:&#039;,chatBoxSenderId,&quot; msg send by:&quot;,data.senderId); // Dynamically update the chat with the new message if (senderId==data.senderId) { console.log(&quot;hello&quot;); msgReceived(data); chatBox.innerHTML += ` &lt;div class=&quot;received-message&quot;&gt; &lt;div class=&quot;message-box&quot; id=&quot;messageBox-${data.id}&quot;&gt;&lt;/div&gt; &lt;!---&lt;div class=&quot;sender-info&quot;&gt;Sent by: ${data.senderId} at ${new Date(timestamp).toLocaleString()}&lt;/div&gt; ---&gt; &lt;/div&gt; `; // typeMessage(data.msgText); showTypingEffect(`messageBox-${data.id}`, data.msgText); }else{ sendNotification(data); } // Scroll to the bottom of the chat box chatBox.scrollTop = chatBox.scrollHeight; }); socket.on(&#039;sendNotification&#039;,(data)=&gt;{ console.log(&quot;listing sendNotification data:&quot;,data); }) socket.on(&#039;newMemberOnline&#039;, (data) =&gt; { console.log(&quot;Listening to newMemberOnline data:&quot;, data); // Emit fetchOnlineUser event to server socket.emit(&#039;fetchOnlineUser&#039;, { data, campaignData }, (ack) =&gt; { if (ack.statusCode === 200) { console.log(&#039;fetchOnlineUser response&#039;, ack.data); // Get the currently active element(s) to reapply later const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;)); const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs // Remove &#039;active&#039; class from all elements activeElements.forEach((el) =&gt; { el.classList.remove(&#039;active&#039;); }); // Populate contacts populateContacts(ack.data, &#039;one-to-one&#039;); // Reapply the &#039;active&#039; class to the previously active element(s) activeElementIds.forEach((id) =&gt; { const element = document.getElementById(id); if (element) { element.classList.add(&#039;active&#039;); } else { console.warn(`Element with ID &quot;${id}&quot; not found.`); } }); } else { console.error(&quot;Error in fetchOnlineUser:&quot;, ack.error || &quot;Unknown error&quot;); } }); }); // Show One-to-One Chats by default showOneToOne(); }); function msgReceived(data){ console.log(&quot;eter in msgReceived &amp; data is:&quot;, data); socket.emit(&#039;msgReceived&#039;,{data},(ack)=&gt;{ if (ack.statusCode===200) { console.log(&#039;msgReceived responce&#039;,ack.data); // populateContacts(ack.data,&#039;one-to-one&#039;) } else { console.log(&quot;Error in msgReceived&quot;, ack.error); } }); } // if user is connect to socket function userConnected() { console.log(&#039;campaignData coneccting user&#039;,campaignData); socket.emit(&#039;newUserConnected&#039;,{campaignData},(ack)=&gt;{ console.log(&quot;newUserConnected&quot;,ack); if (ack.statusCode===200) { console.log(&#039;newUserConnected responce&#039;,ack.data); // populateContacts(ack.data,&#039;one-to-one&#039;) } else { console.log(&quot;Error in newUserConnected&quot;, ack.error); } }) } // Send a message function (unchanged) function sendMessage(event, type) { event.preventDefault(); const messageInput = document.getElementById(&#039;message-input&#039;); const message = messageInput.value.trim(); if (message) { const msgText = escapeHtml(message); const receiverId = document.getElementById(&#039;chat-name&#039;).dataset.receiverId; const receiverName = document.getElementById(&#039;chat-name&#039;).innerHTML; const campaignId= document.getElementById(&#039;campaignId&#039;).value; const campaignName= document.getElementById(&#039;campaignName&#039;).value; const chatBox = document.getElementById(&#039;chat-box&#039;); const timestamp = Date.now().toString(); const localMessageId = generateUUID(); socket.emit(&#039;sendMessage&#039;, { receiverId, receiverName, campaignId,campaignName,type, msgText, localMessageId, timestamp }, (ack) =&gt; { if (ack.statusCode === 200) { // let msg=escapeHtml(message) chatBox.innerHTML += ` &lt;div class=&quot;sent-message&quot;&gt; &lt;div class=&quot;message-box&quot;&gt;${msg}&lt;/div&gt; &lt;/div&gt; `; messageInput.value = &#039;&#039;; // Clear the input chatBox.scrollTop = chatBox.scrollHeight; // Scroll to bottom } else { console.log(&quot;Error in messageSend&quot;, ack.error); } }); } } // send notification function sendNotification(msg){ console.log(&#039;enter in sendNotification &#039;,msg); socket.emit(&#039;sendNotification&#039;,{msg},(ack)=&gt;{ if (ack.statusCode===200) { console.log(&#039;notification responce&#039;,ack.data); // Get the currently active element(s) to reapply later const activeElements = Array.from(document.getElementsByClassName(&#039;active&#039;)); const activeElementIds = activeElements.map(el =&gt; el.id); // Assuming elements have unique IDs // Remove &#039;active&#039; class from all elements activeElements.forEach((el) =&gt; { el.classList.remove(&#039;active&#039;); }); populateContacts(ack.data,&#039;one-to-one&#039;); // Reapply the &#039;active&#039; class to the previously active element(s) activeElementIds.forEach((id) =&gt; { const element = document.getElementById(id); if (element) { element.classList.add(&#039;active&#039;); } else { console.warn(`Element with ID &quot;${id}&quot; not found.`); } }); } else { console.log(&quot;Error in messageSend&quot;, ack.error); } }) } // Function to generate unique UUID for message function generateUUID() { return &#039;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#039;.replace(/[xy]/g, function(c) { var r = Math.random() * 16 | 0, v = c === &#039;x&#039; ? r : (r &amp; 0x3 | 0x8); return v.toString(16); }); } &lt;/script&gt; &lt;script&gt; function showTypingEffect(elementId, msgText, speed = 100) { let index = 0; const element = document.getElementById(elementId); element.textContent += msgText // function typeCharacter() { // if (index &lt; msgText.length) { // element.textContent += msgText.charAt(index); // index++; // setTimeout(typeCharacter, speed); // call itself to simulate typing // } // } typeCharacter(); } function escapeHtml(unsafe) { return unsafe .replace(/&amp;/g, &quot;&amp;amp;&quot;) .replace(/&lt;/g, &quot;&amp;lt;&quot;) .replace(/&gt;/g, &quot;&amp;gt;&quot;) .replace(/&quot;/g, &quot;&amp;quot;&quot;) .replace(/&#039;/g, &quot;&amp;#039;&quot;); } &lt;/script&gt; &lt;/body&gt;',	'56765854-b966-4458-baf1-0ba9690d2ec6',	1),
(329,	40,	42,	17,	'testwebrtc',	1736139936357,	0,	'document.getElementById(`${receiverId}-${receiverName}`).classList.add(&#039;active&#039;);',	'f266b33e-fdd2-471e-8263-8c743d82f103',	1),
(330,	43,	40,	18,	'demoptl',	1736240147036,	0,	'hello',	'a303acc4-30a5-499e-a6a1-ef521724236b',	1),
(331,	43,	40,	18,	'demoptl',	1736240150023,	0,	'how are',	'3180463a-bd0a-4250-89cd-ffbba7896637',	1),
(332,	43,	40,	18,	'demoptl',	1736240152922,	0,	'you',	'00dff5f3-9bfc-46db-bfb3-8cd62a9731e3',	1),
(333,	43,	40,	18,	'demoptl',	1736240177318,	0,	'&lt;b&gt;test&lt;/b&gt;',	'f1c3c97c-fd3c-4b0f-bd30-bef15de761fd',	1),
(334,	43,	40,	18,	'demoptl',	1736240204909,	0,	'👍',	'b1beee62-5565-40e7-88bd-9049a2c90f0b',	1),
(335,	43,	40,	18,	'demoptl',	1736243261387,	0,	'hello',	'a977d580-0fb6-419d-96df-fab5f268a540',	1),
(336,	43,	42,	18,	'demoptl',	1736244931732,	0,	'dfdf',	'ad2098d1-4fa1-494f-b51d-7c28f755d2fc',	1),
(337,	43,	42,	18,	'demoptl',	1736246027809,	0,	'hello',	'47c760fd-8d38-409a-b8ea-fca309612d56',	1),
(338,	43,	42,	18,	'demoptl',	1736246029857,	0,	'fgfgf',	'e21bf40e-6fea-47ab-81f7-9e362de21f46',	1),
(339,	43,	42,	18,	'demoptl',	1736246031338,	0,	'fgfg',	'40ff035e-b83f-46f7-8c2f-0ced3398c102',	1),
(340,	43,	42,	18,	'demoptl',	1736246033456,	0,	'fgfg',	'd0369133-5a1e-461a-8cae-30a8ccd9cfcd',	1),
(341,	42,	43,	18,	'demoptl',	1736246040926,	0,	'fgfgfg',	'e71ec487-2c4b-4460-8c16-7279518ea1b6',	1),
(342,	42,	43,	18,	'demoptl',	1736246042801,	0,	'fgfgf',	'73bc7054-703e-4b0c-a26b-a0fd451a2078',	1),
(343,	42,	43,	18,	'demoptl',	1736246044683,	0,	'fgfgf',	'ea79e70e-c4fe-46fd-9de0-a6d1a45f3e5a',	1),
(344,	42,	43,	18,	'demoptl',	1736246046266,	0,	'fgfg',	'baad64d8-f9cd-4ce5-b4b0-152967b7aeb6',	1),
(345,	42,	43,	18,	'demoptl',	1736246048004,	0,	'fgfg',	'80ea7970-ffcb-47c4-b094-ea3a75ca0b35',	1),
(346,	43,	42,	18,	'demoptl',	1736246298534,	0,	'hello',	'e9446ed7-15f3-4e14-88fd-a3ff79f877f1',	1),
(347,	42,	43,	18,	'demoptl',	1736246396794,	0,	'Hellow',	'c0bdd99c-d709-47f2-802e-f384b844e926',	1),
(348,	43,	42,	18,	'demoptl',	1736246317034,	0,	'how are',	'1d92ed3f-9e5c-4cd5-b24b-700a2d6b9477',	1),
(349,	43,	42,	18,	'demoptl',	1736246319247,	0,	'your',	'f68f2f52-942c-4a86-806c-a7f34c8543f7',	1),
(350,	43,	42,	18,	'demoptl',	1736246320933,	0,	'jkdnjkvdfg',	'fab4f032-ba12-4f4e-929d-d2384a143e27',	1),
(351,	43,	42,	18,	'demoptl',	1736246322741,	0,	'jkldfjklfdsjklf',	'32af837b-8e06-4592-9380-ced856885190',	1),
(352,	43,	42,	18,	'demoptl',	1736246324134,	0,	'jkdfjksdhfjkds',	'd77bc17a-04fd-4d6c-93e2-18e00b5091d5',	1),
(353,	43,	42,	18,	'demoptl',	1736246539679,	0,	'hello',	'5fb99a53-c08c-43b9-8d4d-2a19fccf0948',	1),
(354,	43,	42,	18,	'demoptl',	1736246541807,	0,	'jj',	'3cbe98cf-5829-429d-ab1e-4294a9bc8c73',	1),
(355,	40,	42,	18,	'demoptl',	1736247577121,	0,	'hello',	'1c058366-f616-497a-aa36-4d474cd99360',	1),
(356,	42,	43,	18,	'demoptl',	1736249792988,	0,	'Multiple chat window design (not functional) at the bottom right corner ... CodePen requires JavaScript to render the code and preview areas in this view.',	'6477c0e3-7556-4955-87e8-763412541bce',	1),
(357,	43,	42,	18,	'demoptl',	1736249808402,	0,	'Multiple chat window design (not functional) at the bottom right corner ... CodePen requires JavaScript to render the code and preview areas in this view.',	'1bfbf2c2-132d-48ec-9261-81fbc6ae9592',	1),
(358,	43,	42,	18,	'demoptl',	1736250182178,	0,	'dfdf',	'9a967711-3d41-48f6-8787-5bd8d29d366d',	1),
(359,	42,	43,	18,	'demoptl',	1736251224012,	0,	'hello',	'ccf89d6d-8cb8-4c01-8463-d2c83dc63e8b',	1),
(360,	43,	42,	18,	'demoptl',	1736251289867,	0,	'cvcv',	'c329d447-7cb2-4a3c-85b8-d8c803bd814b',	1),
(361,	40,	43,	18,	'demoptl',	1736251371854,	0,	'hello',	'915c3b54-3597-4724-8931-bcafe9e9ebcc',	1),
(362,	40,	43,	18,	'demoptl',	1736251377693,	0,	'this testing',	'72a225ce-ac46-48cd-9320-8d72b1a8baa5',	1),
(363,	40,	43,	18,	'demoptl',	1736251406408,	0,	'this is testing',	'e46e31fc-d5df-49b4-8add-93ae222f7c40',	1),
(364,	42,	40,	18,	'demoptl',	1736251559380,	0,	'hello',	'6362b269-3d95-43f4-92a6-9423a46b686f',	1),
(365,	42,	40,	18,	'demoptl',	1736251564194,	0,	'this is testing',	'53acb58b-8867-408a-84c6-e9d4c9832b8f',	1),
(366,	40,	43,	18,	'demoptl',	1736251606179,	0,	'h',	'0d34bfc3-bf1c-43f8-bb62-1f62809af339',	1),
(367,	40,	43,	18,	'demoptl',	1736251607047,	0,	'k',	'53f24c91-0c56-4843-9f69-524493f2b6ae',	1),
(368,	40,	43,	18,	'demoptl',	1736251608013,	0,	'k',	'de08cb92-c94a-4ab3-9ac8-965ccc2f4250',	1),
(369,	40,	43,	18,	'demoptl',	1736251608863,	0,	'k&#039;',	'8c344b13-e622-4c59-9c9d-b6dfd0b6efe9',	1),
(370,	40,	43,	18,	'demoptl',	1736251609708,	0,	'kp;k',	'702dae96-60ed-4fe3-81bb-3dab3244fcd7',	1),
(371,	40,	43,	18,	'demoptl',	1736251611055,	0,	'joj',	'b2984757-b396-4d41-87b1-9870b1bb5d24',	1),
(372,	40,	43,	18,	'demoptl',	1736251612472,	0,	'kk',	'f42ac6dd-d286-4881-bd98-ab6f80707127',	1),
(373,	40,	43,	18,	'demoptl',	1736252696695,	0,	'hello',	'4cc06e53-1df8-4f7b-ad36-d31693ee123c',	1),
(374,	43,	40,	18,	'demoptl',	1736252703437,	0,	'hello',	'b50dc4c5-cbed-44e3-a627-6a37bc7c1c04',	1),
(375,	40,	43,	18,	'demoptl',	1736252731877,	0,	'fdsafdsasdf',	'49599d62-4440-4719-a2fe-5a89eec26417',	1),
(376,	40,	42,	18,	'demoptl',	1736252747889,	0,	'sfasdfasfd',	'fb3178a0-fd92-428f-a751-f42d6a46d0e8',	1),
(377,	40,	42,	18,	'demoptl',	1736252751023,	0,	'fadsdfasd',	'4f44781f-d0f4-498f-8b3c-a3142b25c55c',	1),
(378,	40,	43,	18,	'demoptl',	1736252986430,	0,	'hello',	'b502e7fb-abb4-4c5f-98f2-5642858e01a1',	1),
(379,	40,	43,	18,	'demoptl',	1736252990680,	0,	'fdsadf',	'8669e47e-f18e-4a4a-9e72-4a6697e70787',	1),
(380,	40,	43,	18,	'demoptl',	1736252991551,	0,	'asdfasdf',	'7914f56a-9915-404a-b59b-97d9ebb79765',	1),
(381,	40,	43,	18,	'demoptl',	1736252992250,	0,	'sdfasdf',	'f32a648d-e8b1-43e5-8ed3-99934a05ab34',	1),
(382,	40,	43,	18,	'demoptl',	1736252993050,	0,	'fdsasdf',	'697959e7-174f-4183-a41d-948509aa9a7a',	1),
(383,	40,	43,	18,	'demoptl',	1736252993895,	0,	'dsfas',	'8f1f8a59-c2ad-4b2a-abe7-32c21c088206',	1),
(384,	40,	43,	18,	'demoptl',	1736252995694,	0,	'fdasf',	'00b28e56-7304-44d3-bca8-2894b3ab0d7f',	1),
(385,	43,	42,	18,	'demoptl',	1736253003491,	0,	'hhh',	'94087db8-c6f5-4933-8358-28b4ac2bce95',	1),
(386,	43,	40,	18,	'demoptl',	1736253152579,	0,	'hello',	'649e768f-7b00-4897-9669-797dd98cdd8b',	1),
(387,	43,	42,	18,	'demoptl',	1736253340542,	0,	'hello',	'85fcb0ba-7d01-4b20-b05f-1b1d1f557d98',	1),
(388,	43,	42,	18,	'demoptl',	1736253373546,	0,	'hello',	'1eae6acd-81c4-4a32-95e6-6ea993e3b521',	1),
(389,	43,	42,	18,	'demoptl',	1736253377964,	0,	'dfdfd',	'fce6b7a1-6d34-480d-97e7-81c532a44611',	1),
(390,	43,	42,	18,	'demoptl',	1736253415665,	0,	'helll',	'ff75da70-dafb-4b4d-a7c4-c4d831753f8e',	1),
(391,	42,	43,	18,	'demoptl',	1736254128074,	0,	'sdsd',	'a0799752-263e-4fad-a152-6b49c354c8d1',	1),
(392,	42,	43,	18,	'demoptl',	1736254134639,	0,	'sdsds',	'8887de4f-187c-4a17-95a0-6bcb926c7d8e',	1),
(393,	42,	43,	18,	'demoptl',	1736254146353,	0,	'hello',	'56d79d23-a07b-4694-a091-bcbfa4f9e366',	1),
(394,	43,	42,	18,	'demoptl',	1736254158391,	0,	'hhh',	'bf9bdbee-f8dd-4ad9-aebf-135599cf005d',	1),
(395,	42,	43,	18,	'demoptl',	1736254163722,	0,	'dfdf',	'6df21a63-34b8-4e76-9ae2-fbe187144002',	1),
(396,	42,	43,	18,	'demoptl',	1736254221385,	0,	'dfd',	'6aa27c01-f9d8-41a9-9757-7f28f6f7e5f7',	1),
(397,	42,	43,	18,	'demoptl',	1736254222780,	0,	'dfd',	'954c8fb4-0943-45aa-a376-928b0a7cabab',	1),
(398,	42,	43,	18,	'demoptl',	1736254223312,	0,	'df',	'453d3b4b-9473-4b68-8c77-91cea26f1e87',	1),
(399,	42,	43,	18,	'demoptl',	1736254223624,	0,	'df',	'11cfa83e-569d-41ab-813e-8fa54a5e8534',	1),
(400,	42,	43,	18,	'demoptl',	1736254223852,	0,	'df',	'f9af0b06-927a-43c0-bf6e-481a4b3aa2cc',	1),
(401,	42,	43,	18,	'demoptl',	1736254312608,	0,	'ddfdfd',	'cb7703bd-2849-4ccc-88d9-3073c1a7ce56',	1),
(402,	42,	43,	18,	'demoptl',	1736254312987,	0,	'df',	'946c3a9e-6836-4bca-93f8-d6b4e6a1c1df',	1),
(403,	42,	43,	18,	'demoptl',	1736254314150,	0,	'dfd',	'a333d767-d1ee-4016-b452-f62738157543',	1),
(404,	42,	43,	18,	'demoptl',	1736254314393,	0,	'f',	'57beaf6c-552a-4103-8731-f014a91fb94b',	1),
(405,	42,	43,	18,	'demoptl',	1736254314644,	0,	'df',	'0369ec06-ba89-439a-a7ae-0dab9ed7e0a3',	1),
(406,	42,	43,	18,	'demoptl',	1736254333480,	0,	'dfdfdfd',	'e8c9b115-14a5-47f6-b7b0-40db6f94aa8e',	1),
(407,	42,	43,	18,	'demoptl',	1736254343350,	0,	'dfdfdf',	'03f9ffa6-907a-4443-a0c7-ce790fe0aa43',	1),
(408,	42,	43,	18,	'demoptl',	1736254343689,	0,	'df',	'79463a7a-48ba-44a3-9a56-79d48ce15d55',	1),
(409,	42,	43,	18,	'demoptl',	1736254343962,	0,	'df',	'd27a0428-ef58-435e-a160-2df710c2a420',	1),
(410,	42,	43,	18,	'demoptl',	1736254344192,	0,	'df',	'2e7789de-2bea-482d-a0d5-5662e07cac7c',	1),
(411,	42,	43,	18,	'demoptl',	1736254344395,	0,	'df',	'63d8ca70-5db1-4a66-b207-808ab8b2e066',	1),
(412,	42,	43,	18,	'demoptl',	1736254344708,	0,	'df',	'e3ca7967-684c-463b-8c42-9735e923bf1b',	1),
(413,	43,	42,	18,	'demoptl',	1736254358250,	0,	'ggg',	'1c6243f0-e35d-4c4e-9147-6ac76513554a',	1),
(414,	43,	42,	18,	'demoptl',	1736254358603,	0,	'g',	'afdc4bf1-2471-458d-89a0-b2ebcd97796f',	1),
(415,	43,	42,	18,	'demoptl',	1736254358875,	0,	'gg',	'356b1cf2-4a06-40b2-97cb-df3e308f61f3',	1),
(416,	43,	42,	18,	'demoptl',	1736254359392,	0,	'g',	'15826394-767f-4951-b2cc-0deeec5ed37f',	1),
(417,	42,	43,	18,	'demoptl',	1736254578752,	0,	'ddfdfd',	'8e789990-6fe2-48c2-bfc8-dde383ba1c91',	1),
(418,	42,	43,	18,	'demoptl',	1736254579063,	0,	'df',	'bec35a31-484f-4643-b0be-e8cf504e7854',	1),
(419,	42,	43,	18,	'demoptl',	1736254579319,	0,	'fd',	'06b44cde-beec-4c23-aa2e-516bebbd5fcb',	1),
(420,	42,	43,	18,	'demoptl',	1736254580918,	0,	'fdfd',	'73719544-4238-4135-93b5-97de1d57b87d',	1),
(421,	42,	43,	18,	'demoptl',	1736254641087,	0,	'dfdfdfd',	'c769512c-afbc-4a15-a5e3-d819609ffc02',	1),
(422,	42,	43,	18,	'demoptl',	1736254641417,	0,	'df',	'682d8ea0-491c-470e-8a40-996c712ce677',	1),
(423,	42,	43,	18,	'demoptl',	1736254641679,	0,	'df',	'a0af54ff-4b7d-4054-b8b6-ad5b0197d37c',	1),
(424,	42,	43,	18,	'demoptl',	1736254641903,	0,	'df',	'9a5c8240-11b3-4593-a971-2adc1ad78438',	1),
(425,	42,	43,	18,	'demoptl',	1736254642099,	0,	'd',	'ed503eaa-83ca-4b68-a37f-df92b9aa9a46',	1),
(426,	42,	43,	18,	'demoptl',	1736254642373,	0,	'fd',	'07ebe77a-0603-4a24-99ab-9ce13d238ec5',	1),
(427,	42,	43,	18,	'demoptl',	1736254642603,	0,	'fd',	'fe090b8b-9ac1-40c4-a047-f87a30610010',	1),
(428,	42,	43,	18,	'demoptl',	1736254642890,	0,	'fds',	'ae3bb456-bda4-480e-a4ba-793878024498',	1),
(429,	42,	43,	18,	'demoptl',	1736254643755,	0,	'gdger',	'aa83c34e-f173-4d29-b6fd-041c43ac8780',	1),
(430,	42,	43,	18,	'demoptl',	1736254833463,	0,	'sdfdfd',	'eed401b2-6e7a-4aac-8a63-3c51baa53d11',	1),
(431,	42,	43,	18,	'demoptl',	1736254833792,	0,	'd',	'176a75ef-5845-4521-a44a-8c7cb403c6a2',	1),
(432,	42,	43,	18,	'demoptl',	1736254834143,	0,	'fd',	'ee1e6acd-3b4e-43ff-85ab-ee793f3a73d1',	1),
(433,	42,	43,	18,	'demoptl',	1736254834395,	0,	'fd',	'f8eabb54-692f-49a8-9720-3ed71156a4b7',	1),
(434,	42,	43,	18,	'demoptl',	1736254834625,	0,	'fd',	'92d10f6d-28e3-4892-a1aa-9fa0f45391d5',	1),
(435,	42,	43,	18,	'demoptl',	1736254834807,	0,	'f',	'54735990-8830-4f7a-8ca5-37f7caddfbcd',	1),
(436,	42,	43,	18,	'demoptl',	1736254841993,	0,	'df',	'0450a809-bfcf-41a6-a9e4-d8c5d3305751',	1),
(437,	42,	43,	18,	'demoptl',	1736254842940,	0,	'dfdf',	'2b169c64-8904-43d2-baad-aafdd5d89091',	1),
(438,	42,	43,	18,	'demoptl',	1736254845817,	0,	'helll',	'5e948f09-1327-4558-9fcd-ae6b9ea7fbf7',	1),
(439,	42,	43,	18,	'demoptl',	1736254846821,	0,	'cvdfd',	'93e8dee0-3a86-4af1-b96d-0ac21e4cf8e1',	1),
(440,	43,	42,	18,	'demoptl',	1736255199070,	0,	'hello',	'56a1b1d9-210c-42ac-a34d-48f1f033eb1a',	1),
(441,	43,	42,	18,	'demoptl',	1736255200555,	0,	'jjkcvksdlf',	'67cfca3b-764b-492d-bae6-149df12a6344',	1),
(442,	42,	43,	18,	'demoptl',	1736255205703,	0,	'dfdfd',	'df023a46-4fc8-4acb-8da3-c37f8dbb6b51',	1),
(443,	42,	43,	18,	'demoptl',	1736255214779,	0,	'dfdfd',	'55650326-178d-4363-a357-a8ab47a003db',	1),
(444,	42,	43,	18,	'demoptl',	1736255230412,	0,	'hello',	'85547018-0e87-4766-9e60-75c2cb584a92',	1),
(445,	42,	43,	18,	'demoptl',	1736255235155,	0,	'this os testing',	'1b4ff55e-0b3c-4d81-b71e-6feaf437a846',	1),
(446,	42,	43,	18,	'demoptl',	1736255297799,	0,	'hello thi sdsfdf',	'f150d0e4-6387-479f-b554-32449f651b6b',	1),
(447,	42,	43,	18,	'demoptl',	1736255298952,	0,	'dfdf',	'27beda34-5aa8-49f1-b780-851bbe020e9d',	1),
(448,	42,	43,	18,	'demoptl',	1736255338081,	0,	'dfdfd',	'fd2e5514-9a7b-4925-9215-dde3a75e172f',	1),
(449,	42,	43,	18,	'demoptl',	1736255344931,	0,	'dfdfd',	'18cb0734-e79d-405b-b079-0f277641f3b2',	1),
(450,	42,	43,	18,	'demoptl',	1736255357789,	0,	'dfdfd',	'232b46b3-e3f5-4b39-b339-ef0f76976759',	1),
(451,	43,	42,	18,	'demoptl',	1736255435994,	0,	'hi udit',	'00f70ebf-a15a-4fb8-9b8d-14386e85538e',	1),
(452,	43,	42,	18,	'demoptl',	1736255440348,	0,	'how are you',	'411565c1-1752-4394-9760-99bdb70d26cc',	1),
(453,	42,	43,	18,	'demoptl',	1736255448918,	0,	'hi azaj',	'f9648b85-2aca-4477-9218-bf9cc5b900c6',	1),
(454,	43,	42,	18,	'demoptl',	1736255459147,	0,	'alok',	'5b9285d1-d6d4-4ef4-9188-155ea2bff2c4',	1),
(455,	43,	42,	18,	'demoptl',	1736255461116,	0,	'dfdklfjdklf',	'4ebd4a4b-4a2c-465d-8ac8-4beb31014d17',	1),
(456,	42,	43,	18,	'demoptl',	1736255484054,	0,	'thisdfdfds',	'1c400a62-3cab-4bd0-907c-5a3586c01593',	1),
(457,	42,	43,	18,	'demoptl',	1736255485324,	0,	'ddfgdf',	'7ab8dff6-b935-4448-b0bb-0c687f8b4066',	1),
(458,	42,	43,	18,	'demoptl',	1736255485605,	0,	'df',	'5c5112be-8e4f-4e2f-8495-48449a94dd42',	1),
(459,	42,	43,	18,	'demoptl',	1736255485910,	0,	'g&#039;fd',	'e6795c41-f0a6-47d2-a799-78db444d6bf6',	1),
(460,	42,	43,	18,	'demoptl',	1736255486368,	0,	'gdf',	'a52aad21-1aab-4da1-ac48-d3ee6b30d2b3',	1),
(461,	43,	42,	18,	'demoptl',	1736256251321,	0,	'thisds',	'25d6892f-3f2b-40cd-b2b8-a26222df0a4e',	1),
(462,	43,	42,	18,	'demoptl',	1736256252978,	0,	'kldsjfkds',	'0edf4fa0-f069-4590-9e81-8362302072f9',	1),
(463,	42,	43,	18,	'demoptl',	1736256260260,	0,	'dfdf',	'12024f67-63c3-4db1-a6ab-f3ce6b57ca95',	1),
(464,	40,	43,	18,	'demoptl',	1736256273099,	0,	'hello this is nitish',	'c78aedb4-c681-44a1-9cea-c32293c87417',	1),
(465,	40,	43,	18,	'demoptl',	1736256284469,	0,	'jhfhgfghjgjkkl',	'7e109103-da90-4c4a-b143-441c9c5516ad',	1),
(466,	42,	43,	18,	'demoptl',	1736256320569,	0,	'dfdfdf',	'631e8227-e28a-4197-9c48-893f3f0bd719',	1),
(467,	42,	43,	18,	'demoptl',	1736256322460,	0,	'dfdfd',	'5512f4cb-ce5f-4960-8d09-80e6c3a24445',	1),
(468,	40,	43,	18,	'demoptl',	1736256331257,	0,	'dsfasdf',	'998476af-d160-44d8-b47f-1b7b0db6746e',	1),
(469,	40,	43,	18,	'demoptl',	1736256333108,	0,	'fdasdf',	'0bff2243-9e88-4e76-8c43-82237eadcedc',	1),
(470,	40,	43,	18,	'demoptl',	1736256334151,	0,	'sfsda',	'5056b1df-4609-4985-8226-e76be05237d5',	1),
(471,	40,	43,	18,	'demoptl',	1736256334608,	0,	'dsfa',	'95259e50-5227-4f66-ada1-00fddc0e7b28',	1),
(472,	40,	43,	18,	'demoptl',	1736256335037,	0,	'dfsd',	'2389f47c-4f59-4deb-9965-cb9e233e55db',	1),
(473,	40,	43,	18,	'demoptl',	1736256339270,	0,	'fdasdfsdfa',	'f9a1d9a8-b8fc-42c1-a5ab-394c89116b19',	1),
(474,	43,	40,	18,	'demoptl',	1736311486504,	0,	'Hello nitish',	'ef55068e-05eb-4b26-949e-35cf4769e7cd',	1),
(475,	43,	42,	18,	'demoptl',	1736312273741,	0,	'hi azaj',	'd22d08c8-bf25-4c15-b794-f65430b919f5',	1),
(476,	43,	42,	18,	'demoptl',	1736312283325,	0,	'how are you',	'7d8b7e0d-5459-4841-abd0-a16d294771c0',	1),
(477,	43,	42,	18,	'demoptl',	1736312295726,	0,	'this is testing',	'd6a58a82-6622-4031-8756-16ba8064bf15',	1),
(478,	42,	43,	18,	'demoptl',	1736313857798,	0,	'hello udit',	'62b93764-f828-49b3-987f-ea95480be11d',	1),
(479,	43,	42,	18,	'demoptl',	1736313869238,	0,	'how are you',	'30d77598-f916-466b-8641-1282cfc819ce',	1),
(480,	42,	40,	18,	'demoptl',	1736313922221,	0,	'hello',	'a60b3faf-5cf9-4c77-92ee-f715730d33f9',	1),
(481,	42,	40,	18,	'demoptl',	1736313926927,	0,	'hwww',	'893999ae-289f-45be-888e-a353b5182a60',	1),
(482,	43,	42,	18,	'demoptl',	1736314091359,	0,	'dfdfd',	'60bfff28-b2eb-4465-b57f-f73b64fd95c1',	1),
(483,	43,	42,	18,	'demoptl',	1736314094369,	0,	'dfdfd',	'fb076f1b-fe5e-4d5e-bb7b-af7ff5dacfac',	1),
(484,	43,	42,	18,	'demoptl',	1736314111965,	0,	'ssss',	'3655cde9-5509-4851-81b3-b07040ab5225',	1),
(485,	43,	42,	18,	'demoptl',	1736314118465,	0,	'dfdf',	'e1868275-0e50-46bc-a55c-40a4d8076d29',	1),
(486,	43,	42,	18,	'demoptl',	1736314123212,	0,	'hello',	'f2df1822-0f26-425e-a511-e6707e3147fc',	1),
(487,	43,	42,	18,	'demoptl',	1736314133218,	0,	'how are you',	'296c7b11-d436-44df-983e-47d67b69092b',	1),
(488,	43,	42,	18,	'demoptl',	1736314373016,	0,	'dfdfd',	'577d7494-0c49-4140-b8e6-43133ad931dc',	1),
(489,	43,	42,	18,	'demoptl',	1736314386231,	0,	'erer',	'184a66a2-e2a4-4efa-84cb-ef10b44d9763',	1),
(490,	43,	42,	18,	'demoptl',	1736314387039,	0,	'erfe',	'5d0a8538-5615-4678-b8a4-11e8e009111e',	1),
(491,	43,	42,	18,	'demoptl',	1736314401054,	0,	'how are',	'bfc8a744-25eb-4fc2-9105-cb1c7fd20074',	1),
(492,	43,	42,	18,	'demoptl',	1736314437844,	0,	'hello how are you',	'e52dca5a-c3b5-4313-9fe5-422a23e8d09e',	1),
(493,	43,	42,	18,	'demoptl',	1736314447271,	0,	'hhi',	'64964da2-1a8c-461c-b8a3-e1d2d044a653',	1),
(494,	43,	42,	18,	'demoptl',	1736314448194,	0,	'kljkl',	'1f4ae514-9b72-43ee-a56c-3c05f92ff06b',	1),
(495,	43,	42,	18,	'demoptl',	1736314449290,	0,	'jhkl',	'e9e4cfa6-0edf-4baf-9398-62bcb28d069f',	1),
(496,	43,	42,	18,	'demoptl',	1736416369096,	0,	'hello',	'e08fffbf-9352-47b9-9046-4e577705d396',	1),
(497,	44,	41,	17,	'testwebrtc',	1736490290794,	0,	'hello',	'79092dfe-efd1-4e91-b97e-4ca83a6852cf',	1),
(498,	41,	44,	17,	'testwebrtc',	1736490253234,	0,	'hi',	'c8cab371-94fa-4522-bee9-bf5a4b6e8136',	1),
(499,	44,	41,	17,	'testwebrtc',	1736490407695,	0,	'dhjfdhjfkd',	'b150bd07-44a2-442f-8489-d69ffcd8edec',	1),
(500,	41,	44,	17,	'testwebrtc',	1736490260812,	0,	'test from ak singh',	'81ebe077-5c45-4a77-8793-7fb18eceafa7',	1),
(501,	41,	44,	17,	'testwebrtc',	1736490267195,	0,	'kaise ho',	'29561b46-0dad-40e7-a9c0-3ab0c3310895',	1),
(502,	41,	44,	17,	'testwebrtc',	1736490294046,	0,	'c',	'b5809453-83b7-4fcc-b6a0-88c5c3519959',	1),
(503,	41,	44,	17,	'testwebrtc',	1736490301341,	0,	'Testing scenario as follows:  TC1: Validate that &quot;Decision Tree&quot; tab permission mapped to client Status: Pass Expected Result: &quot;Decision Tree&quot; tab works in webrtc agent according to permission provided to client Actual Result: works as expected  TC2: Validate that &quot;Ticket&quot; tab permission mapped to client Status: Pass Expected Result: &quot;Ticket&quot; tab works in webrtc agent according to permission provided to client Actual Result: works as expected  UseCase (Instructions):  Step1: Login to super Admin via valid credentials =&gt; Go to Master Section =&gt; Click on Client Step2: Now in the `Client` Section fetch the Module &#039;Dynamic Tree Permission&#039; Consisting of CRM/Assigned/Decision Tree/Ticket options. Step3: We can enable/disable the `Decision Tree/Ticket` permission to client and check that in webrtc agent:         (i) Decision Tree - &quot;Decision Tree&quot; tab works in webrtc agent, if permission provided to client        (ii) Ticket - &quot;Ticket&quot; tab works in webrtc agent, if permission provided to client 	     File Changes:  1. Table `vm_client` altered in &quot;galaxy_main_v5&quot; database  ALTER TABLE `vm_client` ADD `crm_permission` tinyint(1) NOT NULL DEFAULT &#039;0&#039;, ADD `assigned_permission` tinyint(1) NOT NULL DEFAULT &#039;0&#039; AFTER `crm_permission`, ADD `decision_tree_permission` tinyint(1) NOT NULL DEFAULT &#039;0&#039; AFTER `assigned_permission`, ADD `ticket_permission` tinyint(1) NOT NULL DEFAULT &#039;0&#039; AFTER `decision_tree_permission`;  2. File changes as follows:  (i) permission.php =&gt; /galaxyv5/admin/client/',	'caab7e71-6aed-4f42-9694-a91598491be5',	1),
(504,	44,	41,	17,	'testwebrtc',	1736490482215,	0,	'&lt;b&gt;hello&lt;/b&gt;',	'8bd1a95b-c9f6-4e89-99d2-a752da539e95',	1),
(505,	41,	44,	17,	'testwebrtc',	1736490916239,	0,	'List of Tickets included in the release :-      Feature #7588: Reg : In Analytic - Add Last Status Of Message in Delivery Report -     Feature #7739: Update Whatsapp Business profile details including media.     Feature #7774: Template Module - Upgrade.     Feature #7781: Attachment &amp; Emoji in Chat View.     Feature #7783: CS (R&amp;D): chat view web socket.     Feature #7784: Web (R&amp;D): chat view web socket.     Feature #7786: Request to Update WhatsApp API Message Logic for Improved Delivery.     Feature #7799: Changes in api for send message.     Feature #7829: Quick Link.     Feature #7873: Whatsapp Bot Flow(BOTH TYPE) Required for Development.     Feature #7941: Develop Webhook Integration Feature.     Feature #7979: chat view web socket (webrtc agent ).     Feature #8002: Update the customer name variable in Jar.     Feature #8015: Emoji in chat view.',	'00d7b396-f502-4037-9254-1554d8ff107a',	1),
(506,	41,	44,	17,	'testwebrtc',	1736490945669,	0,	'TC1: Validate that &quot;Decision Tree&quot; tab permission mapped to client Status: Pass',	'f2bfe285-0f7f-42ec-a0ae-11ca9e4f87dc',	1),
(507,	41,	44,	17,	'testwebrtc',	1736490964147,	0,	'TC1: Validate that &quot;Decision Tree&quot; tab permission mapped to client Status: Pass',	'f63b01d2-6a19-4491-8d3f-a34ecc5d5f3f',	1),
(508,	44,	41,	17,	'testwebrtc',	1736491144283,	0,	'kyo aisa bhej rahe hoi',	'2b4d67de-f156-41b7-9867-db8cf8cc8c0b',	1),
(509,	41,	44,	17,	'testwebrtc',	1736491003354,	0,	'hello',	'7e07d655-3b50-4d5c-87c0-91470f20f3e1',	1),
(510,	41,	40,	18,	'demoptl',	1736491158975,	0,	'hi alok',	'7982a3e3-ff36-4531-b6d6-89e71c13b036',	1),
(511,	44,	41,	17,	'testwebrtc',	1736491388185,	0,	'hello',	'c607f66c-ce0f-4d09-ab8e-fdd4f86ccc6e',	1),
(512,	44,	41,	17,	'testwebrtc',	1736491443000,	0,	'test',	'161851b2-3b8f-429c-adc2-10bfc015729d',	1),
(513,	44,	41,	17,	'testwebrtc',	1736491487823,	0,	'hi',	'36640f93-875a-4f57-8601-70dd9480ca53',	1),
(514,	41,	44,	17,	'testwebrtc',	1736494457247,	0,	'TC1: Validate that &quot;Decision Tree&quot; tab permission mapped to client Status: Pass',	'3a76ab3f-219c-4a7e-a4f7-a55de2bf7e19',	1),
(515,	41,	45,	17,	'testwebrtc',	1736494719360,	0,	'hi atharv',	'4afcc677-e329-42d5-a378-491e5080549b',	1),
(516,	44,	45,	17,	'testwebrtc',	1736494903131,	0,	'hello',	'c9ade6a6-bba0-4b31-af62-7c9b406bc524',	1),
(517,	45,	44,	17,	'testwebrtc',	1736495603201,	0,	'yes',	'6ee3aab8-e89e-44e7-8acc-76b61152a67d',	1),
(518,	44,	45,	17,	'testwebrtc',	1736495621313,	0,	'kaise',	'850582f2-7341-485a-a4c6-2225392b79ad',	1),
(519,	41,	44,	17,	'testwebrtc',	1736495800298,	0,	'jdghjgdf  ksajkjsda',	'7649c2eb-7636-46ad-91a9-1cdb8b831acb',	1),
(520,	41,	44,	17,	'testwebrtc',	1736495803652,	0,	'sajjkdsa',	'a272336a-74f1-4307-8303-e70faf504671',	1),
(521,	41,	44,	17,	'testwebrtc',	1736495805047,	0,	'bjsadkj',	'43008b6e-1c10-4bb3-bdf5-ea4887b6b2fc',	1),
(522,	41,	44,	17,	'testwebrtc',	1736495806339,	0,	'basdjbjk',	'72c41193-8e65-4741-b93a-1e5b81855694',	1),
(523,	41,	44,	17,	'testwebrtc',	1736495808883,	0,	'ahsKJLDS',	'c4cbdf94-3af7-4747-b470-53e22d3ea964',	1),
(524,	41,	44,	17,	'testwebrtc',	1736495825875,	0,	'13232132',	'd00b8c06-06fd-40a7-8a7c-37085df03960',	1),
(525,	41,	44,	17,	'testwebrtc',	1736495836127,	0,	'@##$',	'a5d1cbd8-386d-4a92-b416-6a8069ccbb94',	1),
(526,	41,	44,	17,	'testwebrtc',	1736495847213,	0,	'SAHzBS',	'b390264a-103d-4181-a1f7-e80edface3c9',	1),
(527,	44,	41,	17,	'testwebrtc',	1736496007340,	0,	'ddsf',	'6c4b9966-da84-4ce9-8641-8176437a106b',	1),
(528,	44,	41,	17,	'testwebrtc',	1736496008632,	0,	'dsdsf',	'96a70c78-fba8-4992-b5a2-74fc4d692788',	1),
(529,	44,	41,	17,	'testwebrtc',	1736496009439,	0,	'dsf',	'e90e3deb-ce04-41a7-bade-8fb2675ad525',	1),
(530,	44,	41,	17,	'testwebrtc',	1736496009940,	0,	'fds',	'32e4afe8-e647-4653-84ff-82e55c57e0fe',	1),
(531,	44,	41,	17,	'testwebrtc',	1736496010396,	0,	'fds',	'3f34480b-ff12-41bf-8e88-dacd13f53283',	1),
(532,	40,	43,	18,	'demoptl',	1736743167006,	0,	'hello',	'86e951b9-30d3-41a3-9e09-34b52f72ffde',	1),
(533,	43,	40,	18,	'demoptl',	1736743211825,	0,	'dfdfd',	'7ed46a8a-35b2-4117-884c-f69fd656bb0c',	1),
(534,	42,	40,	18,	'demoptl',	1736743919058,	0,	'hello',	'a6f2c29d-452b-4008-b5a1-4a3838862608',	1),
(535,	42,	40,	18,	'demoptl',	1736744030310,	0,	'dsfasdf',	'2f59f7bf-2f10-48af-bf0e-a84af2f2560f',	1),
(536,	42,	40,	18,	'demoptl',	1736744032704,	0,	'sdfasdf',	'f70649ad-8d0e-43ad-b001-6bfdbb68fe2e',	1),
(537,	42,	40,	18,	'demoptl',	1736746075186,	0,	'hello',	'546b7d29-38c7-44b6-9074-3b955208a3ba',	1),
(538,	42,	40,	18,	'demoptl',	1736746076724,	0,	'dadf',	'78e7a80d-b512-4cb2-b09e-b4c3433577ab',	1),
(539,	42,	40,	18,	'demoptl',	1736747754162,	0,	'dsfasdf',	'f37621f5-7163-4682-83d0-b9dbf35f9096',	1),
(540,	42,	40,	18,	'demoptl',	1736747764185,	0,	'sdfasdf',	'd7a00fa1-d4a5-4cb4-8819-51c9a23b2214',	1),
(541,	42,	40,	18,	'demoptl',	1736747765617,	0,	'sdfasdf',	'53508b97-7692-459a-93c6-602412e8c1b7',	1),
(542,	40,	41,	18,	'demoptl',	1736748065882,	0,	'hhh',	'1843106f-0a71-47f7-b1e2-f6ce5f98aaa7',	1),
(543,	41,	40,	17,	'testwebrtc',	1736748349951,	0,	'hi',	'0e713562-da24-4c43-bca5-56d3868db708',	1),
(544,	41,	40,	17,	'testwebrtc',	1736748353548,	0,	'test1',	'9b135501-fcca-4cca-9023-2a8ea91093ba',	1),
(545,	40,	41,	17,	'testwebrtc',	1736751525364,	0,	'czxcv',	'350ab9e3-0176-4c7c-906a-3ee0e40a892e',	1),
(546,	41,	40,	17,	'testwebrtc',	1736751530322,	0,	'vczcv',	'bade20c8-35d3-4211-bfca-c6d1a7c092af',	1),
(547,	41,	40,	17,	'testwebrtc',	1736751715024,	0,	'hiii',	'6596107a-e1b2-4006-8235-eb3486983c13',	1),
(548,	40,	41,	17,	'testwebrtc',	1736751719012,	0,	'dfsasdf',	'601de2cc-f72f-4ac7-b12b-35db14a2cfda',	1),
(549,	43,	40,	18,	'demoptl',	1736752081662,	0,	'vbvb v',	'8199583d-890c-4d92-aec5-cd899269ae38',	1),
(550,	40,	43,	18,	'demoptl',	1736752085430,	0,	'dsfasfd',	'4d015e39-aa23-4c06-a51e-07af3bcfb521',	1),
(551,	43,	40,	18,	'demoptl',	1737108204364,	0,	'dfdfdf',	'f54c3618-1a40-46ab-a7db-7f7782d1ce9b',	1),
(552,	40,	43,	18,	'demoptl',	1737115890528,	0,	'hello',	'785608f6-f81d-41d7-ab0b-00e032e19e70',	1),
(553,	41,	44,	17,	'testwebrtc',	1737373256838,	0,	'hello',	'85a751a4-b4dc-4e25-9d09-36995d3d8aed',	1),
(554,	41,	44,	17,	'testwebrtc',	1737373266041,	0,	'how r u arvind singh',	'213f97d5-ca97-4994-88ba-2c63550ee19e',	1),
(555,	44,	41,	17,	'testwebrtc',	1737373479506,	0,	'fine',	'5365b362-10a8-4e82-85f0-0d98789587df',	1),
(556,	44,	41,	17,	'testwebrtc',	1737373500685,	0,	'https://qa1.parahittech.com:9089/dashboard',	'4e2898c1-f9ed-4460-bd79-40d8a26d9b69',	1),
(557,	41,	44,	17,	'testwebrtc',	1737373340742,	0,	'URL for agent',	'06cd20d5-09f6-4291-9028-1a1a545517ab',	1),
(558,	44,	41,	17,	'testwebrtc',	1737373557639,	0,	'tes',	'557d761e-d38c-4afb-b624-a75b0ab8066c',	1),
(559,	44,	41,	17,	'testwebrtc',	1737373572742,	0,	'tes1',	'4d38000a-a14d-469a-977b-4e92c9aec72f',	1),
(560,	45,	44,	17,	'testwebrtc',	1737375125197,	0,	'kaise ho',	'40c24dc0-1785-43c0-ae7c-e698c0a2ef81',	1),
(561,	45,	41,	17,	'testwebrtc',	1737377145675,	0,	'hello',	'05cadd75-7372-49a6-9a5b-d14cc170657f',	1),
(562,	41,	45,	17,	'testwebrtc',	1737377156937,	0,	'yes',	'56901601-b22f-470f-8c33-e5a78847e016',	1),
(563,	41,	45,	17,	'testwebrtc',	1737377160694,	0,	'sada',	'51f0231e-8ee4-4ceb-8da8-746cdd066ab3',	1),
(564,	45,	41,	17,	'testwebrtc',	1737377168481,	0,	'kya',	'0e6c8284-32bc-449d-b066-0581d8a19ad1',	1),
(565,	44,	41,	17,	'testwebrtc',	1737377368296,	0,	'testing1',	'7c6f3ddd-be2f-426b-8f6c-0f4907521dab',	1),
(566,	40,	42,	17,	'testwebrtc',	1737957740639,	0,	'hello',	'e996dda2-17ac-4335-ad1b-8f60b8f59bbf',	1),
(567,	42,	40,	17,	'testwebrtc',	1737957746357,	0,	'hi',	'f22db69a-ac7e-41a9-89df-828f4cb32afe',	1),
(568,	40,	42,	18,	'demoptl',	1737961587661,	0,	'hello',	'a1490938-8367-4872-af20-a01697be33aa',	1),
(569,	40,	42,	18,	'demoptl',	1737961637702,	0,	'xcvzxvc',	'd2c0eaba-0b58-403a-9b5b-38108f75c10f',	1),
(570,	40,	42,	18,	'demoptl',	1737961668400,	0,	'kljgfghdg',	'fbaa4d6d-2bb8-4ac0-a022-1db60b3750ff',	1),
(571,	40,	42,	17,	'testwebrtc',	1737962031898,	0,	'hi',	'06d15509-80a7-4067-8bad-5ed60657d791',	1),
(572,	40,	42,	17,	'testwebrtc',	1737962049560,	0,	'hi',	'94a9995b-5ce7-4cd6-9d96-f9ed43e44a1b',	1);

DROP TABLE IF EXISTS `webrtc_users`;
CREATE TABLE `webrtc_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `login_id` int(11) NOT NULL,
  `user_mode_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `lastOnlineAt` varchar(255) DEFAULT NULL,
  `logOutAt` varchar(255) DEFAULT NULL,
  `currentloginCampaignId` int(11) DEFAULT 0,
  `status` enum('active','inactive') DEFAULT 'active',
  `createdAt` datetime DEFAULT NULL,
  `updatedAt` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci;

INSERT INTO `webrtc_users` (`id`, `user_id`, `login_id`, `user_mode_id`, `name`, `lastOnlineAt`, `logOutAt`, `currentloginCampaignId`, `status`, `createdAt`, `updatedAt`) VALUES
(1,	1,	0,	0,	'user1',	'1734943952716',	'1734944008569',	2,	'active',	'2024-12-17 12:04:44',	'2024-12-23 08:53:28'),
(2,	3,	0,	0,	'user3',	'1735011593135',	'1734953113153',	2,	'active',	'2024-12-17 12:05:16',	'2024-12-24 03:39:53'),
(3,	2,	0,	0,	'user2',	'1734934767342',	'1734934833017',	2,	'active',	'2024-12-17 12:14:51',	'2024-12-23 06:20:33'),
(4,	5,	0,	0,	'user5',	'1734589810058',	'1734583383338',	2,	'active',	'2024-12-17 12:15:19',	'2024-12-19 06:30:10'),
(5,	4,	0,	0,	'user4',	'1734945182828',	'1734945227844',	2,	'active',	'2024-12-17 12:15:58',	'2024-12-23 09:13:47'),
(40,	10788,	2358270,	2358270,	'alok',	'1738317014586',	'1738317161250',	18,	'active',	'2024-12-23 13:10:28',	'2025-01-31 09:52:41'),
(41,	10787,	2358271,	2358271,	'abhinav',	'1738314230199',	'1738314263961',	17,	'active',	'2024-12-23 13:11:43',	'2025-01-31 09:04:23'),
(42,	4000,	2358273,	2358273,	'azaj',	'1737978007136',	'1737980299004',	18,	'active',	'2024-12-23 13:15:26',	'2025-01-27 12:18:19'),
(43,	10793,	2358662,	2358662,	'Udit',	'1738323445682',	'1738323721643',	17,	'active',	'2025-01-03 11:08:31',	'2025-01-31 11:42:01'),
(44,	10789,	2358865,	2358865,	'Arvind Singh',	'1738324257791',	'1738324448818',	18,	'active',	'2025-01-10 06:24:41',	'2025-01-31 11:54:08'),
(45,	10786,	2358871,	2358871,	'atharv',	'1737378134049',	'1737378140407',	17,	'active',	'2025-01-10 07:40:09',	'2025-01-20 13:02:20'),
(46,	418,	2358908,	2358908,	'insidesales',	'1736636900999',	'1736642933714',	18,	'active',	'2025-01-11 11:26:29',	'2025-01-12 00:48:53');

-- 2025-02-03 07:05:28
